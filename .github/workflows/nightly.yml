name: Publish Nightly Builds

on:
  push:
    branches:
      - nightly_build
env:
  JAVA_DISTRIBUTION: 'corretto'
  JAVA_VERSION: '11'
jobs:
  short-hash-getter:
    runs-on: ubuntu-latest
    outputs:
      short-hash: ${{ steps.getter.outputs.SHORT_HASH }}
    steps:
      - uses: actions/checkout@v4
      - name: Get Short Hash
        id: getter
        run: |
          echo "SHORT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
  build-test-publish:
    needs: [short-hash-getter] # needed to get the short hash
    strategy:
      fail-fast: false
      matrix:
        include:
          - runson: macos-14 # mac arm
            extraarch: "{for_setup_java: 'x64', for_env: 'X64'}" # we test x64 also using rosetta
            archive: async-profiler-3.0-macos.zip

          - runson: codebuild-test-x86-${{ github.run_id }}-${{ github.run_attempt }}
            archive: async-profiler-3.0-linux-x64.tar.gz

          - runson: codebuild-test-${{ github.run_id }}-${{ github.run_attempt }}
            archive: async-profiler-3.0-linux-arm64.tar.gz
    runs-on: ${{ matrix.runson }}
    steps:
      - uses: actions/setup-java@v4
        if: ${{ matrix.extraarch }}
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}
          architecture: ${{ fromJSON(matrix.extraarch).for_setup_java }} # set up for other architecture first, as the later one will override this
      - uses: actions/setup-java@v4 # setup java for default architecture
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}
          # architecture: not specifying this defaults to architecture of the runner
      - uses: actions/checkout@v4
      - name: Build and Test
        id: build
        run: |
          case "${{ matrix.runson }}" in
            macos*) make FAT_BINARY=true release test -j
            ;;
            *) make CC=/usr/local/musl/bin/musl-gcc release test -j
            ;;
          esac
      - uses: actions/upload-artifact@v4
        if: always() # we always want to upload test logs, especially when tests fail
        with:
          name: test-logs-${{ matrix.archive }}
          path: build/test/logs/
      - name: Test Extra Architectures
        if: ${{ matrix.extraarch }}
        run: JAVA_HOME=$JAVA_HOME_${{ env.JAVA_VERSION }}_${{ fromJSON(matrix.extraarch).for_env }} make test
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.archive }}-${{ needs.short-hash-getter.outputs.short-hash }}
          path: ${{ matrix.archive }}
      - uses: actions/upload-artifact@v4
        if: ${{ matrix.extraarch }} # we always want to upload test logs, especially when tests fail
        with:
          name: test-extraarch-logs-${{ matrix.archive }}
          path: build/test/logs/
      - uses: actions/github-script@v7
        id: delete-previous-and-upload-to-release
        with:
          result-encoding: string
          script: |
            const fs = require('fs').promises;
            const commonOptions = {
              owner: "openorclose",
              repo: "async-profiler",
              release_id: 176384274,
            };
            const assets = await github.rest.repos.listReleaseAssets(commonOptions);
            if (assets.status !== 200) {
              throw new Error("Unable to get list of assets from release!");
            }
            await Promise.all(assets.data
              .filter(({name}) => name.startsWith("${{ matrix.archive }}"))
              .map(({id}) => github.rest.repos.deleteReleaseAsset({...commonOptions, asset_id: id})));
            github.rest.repos.uploadReleaseAsset({
              ...commonOptions,
              name: `${{ matrix.archive }}-${{ needs.build-test.outputs.short-hash }}`,
              data: await fs.readFile("${{ matrix.archive }}"),
            });
