// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/profiles/v1development/profiles.proto

package io.opentelemetry.proto.profiles.v1development;

/**
 * <pre>
 * A collection of Profiles produced by an InstrumentationScope.
 * </pre>
 *
 * Protobuf type {@code opentelemetry.proto.profiles.v1development.ScopeProfiles}
 */
public final class ScopeProfiles extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:opentelemetry.proto.profiles.v1development.ScopeProfiles)
    ScopeProfilesOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ScopeProfiles.newBuilder() to construct.
  private ScopeProfiles(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ScopeProfiles() {
    profiles_ = java.util.Collections.emptyList();
    schemaUrl_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ScopeProfiles();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ScopeProfiles(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            io.opentelemetry.proto.common.v1.InstrumentationScope.Builder subBuilder = null;
            if (scope_ != null) {
              subBuilder = scope_.toBuilder();
            }
            scope_ = input.readMessage(io.opentelemetry.proto.common.v1.InstrumentationScope.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(scope_);
              scope_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              profiles_ = new java.util.ArrayList<io.opentelemetry.proto.profiles.v1development.Profile>();
              mutable_bitField0_ |= 0x00000001;
            }
            profiles_.add(
                input.readMessage(io.opentelemetry.proto.profiles.v1development.Profile.parser(), extensionRegistry));
            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();

            schemaUrl_ = s;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        profiles_ = java.util.Collections.unmodifiableList(profiles_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.opentelemetry.proto.profiles.v1development.ProfilesProto.internal_static_opentelemetry_proto_profiles_v1development_ScopeProfiles_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.opentelemetry.proto.profiles.v1development.ProfilesProto.internal_static_opentelemetry_proto_profiles_v1development_ScopeProfiles_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.opentelemetry.proto.profiles.v1development.ScopeProfiles.class, io.opentelemetry.proto.profiles.v1development.ScopeProfiles.Builder.class);
  }

  public static final int SCOPE_FIELD_NUMBER = 1;
  private io.opentelemetry.proto.common.v1.InstrumentationScope scope_;
  /**
   * <pre>
   * The instrumentation scope information for the profiles in this message.
   * Semantically when InstrumentationScope isn't set, it is equivalent with
   * an empty instrumentation scope name (unknown).
   * </pre>
   *
   * <code>.opentelemetry.proto.common.v1.InstrumentationScope scope = 1;</code>
   * @return Whether the scope field is set.
   */
  @java.lang.Override
  public boolean hasScope() {
    return scope_ != null;
  }
  /**
   * <pre>
   * The instrumentation scope information for the profiles in this message.
   * Semantically when InstrumentationScope isn't set, it is equivalent with
   * an empty instrumentation scope name (unknown).
   * </pre>
   *
   * <code>.opentelemetry.proto.common.v1.InstrumentationScope scope = 1;</code>
   * @return The scope.
   */
  @java.lang.Override
  public io.opentelemetry.proto.common.v1.InstrumentationScope getScope() {
    return scope_ == null ? io.opentelemetry.proto.common.v1.InstrumentationScope.getDefaultInstance() : scope_;
  }
  /**
   * <pre>
   * The instrumentation scope information for the profiles in this message.
   * Semantically when InstrumentationScope isn't set, it is equivalent with
   * an empty instrumentation scope name (unknown).
   * </pre>
   *
   * <code>.opentelemetry.proto.common.v1.InstrumentationScope scope = 1;</code>
   */
  @java.lang.Override
  public io.opentelemetry.proto.common.v1.InstrumentationScopeOrBuilder getScopeOrBuilder() {
    return getScope();
  }

  public static final int PROFILES_FIELD_NUMBER = 2;
  private java.util.List<io.opentelemetry.proto.profiles.v1development.Profile> profiles_;
  /**
   * <pre>
   * A list of Profiles that originate from an instrumentation scope.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.profiles.v1development.Profile profiles = 2;</code>
   */
  @java.lang.Override
  public java.util.List<io.opentelemetry.proto.profiles.v1development.Profile> getProfilesList() {
    return profiles_;
  }
  /**
   * <pre>
   * A list of Profiles that originate from an instrumentation scope.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.profiles.v1development.Profile profiles = 2;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.opentelemetry.proto.profiles.v1development.ProfileOrBuilder> 
      getProfilesOrBuilderList() {
    return profiles_;
  }
  /**
   * <pre>
   * A list of Profiles that originate from an instrumentation scope.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.profiles.v1development.Profile profiles = 2;</code>
   */
  @java.lang.Override
  public int getProfilesCount() {
    return profiles_.size();
  }
  /**
   * <pre>
   * A list of Profiles that originate from an instrumentation scope.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.profiles.v1development.Profile profiles = 2;</code>
   */
  @java.lang.Override
  public io.opentelemetry.proto.profiles.v1development.Profile getProfiles(int index) {
    return profiles_.get(index);
  }
  /**
   * <pre>
   * A list of Profiles that originate from an instrumentation scope.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.profiles.v1development.Profile profiles = 2;</code>
   */
  @java.lang.Override
  public io.opentelemetry.proto.profiles.v1development.ProfileOrBuilder getProfilesOrBuilder(
      int index) {
    return profiles_.get(index);
  }

  public static final int SCHEMA_URL_FIELD_NUMBER = 3;
  private volatile java.lang.Object schemaUrl_;
  /**
   * <pre>
   * The Schema URL, if known. This is the identifier of the Schema that the profile data
   * is recorded in. Notably, the last part of the URL path is the version number of the
   * schema: http[s]://server[:port]/path/&lt;version&gt;. To learn more about Schema URL see
   * https://opentelemetry.io/docs/specs/otel/schemas/#schema-url
   * This schema_url applies to all profiles in the "profiles" field.
   * </pre>
   *
   * <code>string schema_url = 3;</code>
   * @return The schemaUrl.
   */
  @java.lang.Override
  public java.lang.String getSchemaUrl() {
    java.lang.Object ref = schemaUrl_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      schemaUrl_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The Schema URL, if known. This is the identifier of the Schema that the profile data
   * is recorded in. Notably, the last part of the URL path is the version number of the
   * schema: http[s]://server[:port]/path/&lt;version&gt;. To learn more about Schema URL see
   * https://opentelemetry.io/docs/specs/otel/schemas/#schema-url
   * This schema_url applies to all profiles in the "profiles" field.
   * </pre>
   *
   * <code>string schema_url = 3;</code>
   * @return The bytes for schemaUrl.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getSchemaUrlBytes() {
    java.lang.Object ref = schemaUrl_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      schemaUrl_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (scope_ != null) {
      output.writeMessage(1, getScope());
    }
    for (int i = 0; i < profiles_.size(); i++) {
      output.writeMessage(2, profiles_.get(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(schemaUrl_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, schemaUrl_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (scope_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getScope());
    }
    for (int i = 0; i < profiles_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, profiles_.get(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(schemaUrl_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, schemaUrl_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.opentelemetry.proto.profiles.v1development.ScopeProfiles)) {
      return super.equals(obj);
    }
    io.opentelemetry.proto.profiles.v1development.ScopeProfiles other = (io.opentelemetry.proto.profiles.v1development.ScopeProfiles) obj;

    if (hasScope() != other.hasScope()) return false;
    if (hasScope()) {
      if (!getScope()
          .equals(other.getScope())) return false;
    }
    if (!getProfilesList()
        .equals(other.getProfilesList())) return false;
    if (!getSchemaUrl()
        .equals(other.getSchemaUrl())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasScope()) {
      hash = (37 * hash) + SCOPE_FIELD_NUMBER;
      hash = (53 * hash) + getScope().hashCode();
    }
    if (getProfilesCount() > 0) {
      hash = (37 * hash) + PROFILES_FIELD_NUMBER;
      hash = (53 * hash) + getProfilesList().hashCode();
    }
    hash = (37 * hash) + SCHEMA_URL_FIELD_NUMBER;
    hash = (53 * hash) + getSchemaUrl().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.opentelemetry.proto.profiles.v1development.ScopeProfiles parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.opentelemetry.proto.profiles.v1development.ScopeProfiles parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.opentelemetry.proto.profiles.v1development.ScopeProfiles parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.opentelemetry.proto.profiles.v1development.ScopeProfiles parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.opentelemetry.proto.profiles.v1development.ScopeProfiles parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.opentelemetry.proto.profiles.v1development.ScopeProfiles parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.opentelemetry.proto.profiles.v1development.ScopeProfiles parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.opentelemetry.proto.profiles.v1development.ScopeProfiles parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.opentelemetry.proto.profiles.v1development.ScopeProfiles parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.opentelemetry.proto.profiles.v1development.ScopeProfiles parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.opentelemetry.proto.profiles.v1development.ScopeProfiles parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.opentelemetry.proto.profiles.v1development.ScopeProfiles parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.opentelemetry.proto.profiles.v1development.ScopeProfiles prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A collection of Profiles produced by an InstrumentationScope.
   * </pre>
   *
   * Protobuf type {@code opentelemetry.proto.profiles.v1development.ScopeProfiles}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:opentelemetry.proto.profiles.v1development.ScopeProfiles)
      io.opentelemetry.proto.profiles.v1development.ScopeProfilesOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.opentelemetry.proto.profiles.v1development.ProfilesProto.internal_static_opentelemetry_proto_profiles_v1development_ScopeProfiles_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.opentelemetry.proto.profiles.v1development.ProfilesProto.internal_static_opentelemetry_proto_profiles_v1development_ScopeProfiles_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.opentelemetry.proto.profiles.v1development.ScopeProfiles.class, io.opentelemetry.proto.profiles.v1development.ScopeProfiles.Builder.class);
    }

    // Construct using io.opentelemetry.proto.profiles.v1development.ScopeProfiles.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getProfilesFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (scopeBuilder_ == null) {
        scope_ = null;
      } else {
        scope_ = null;
        scopeBuilder_ = null;
      }
      if (profilesBuilder_ == null) {
        profiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        profilesBuilder_.clear();
      }
      schemaUrl_ = "";

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.opentelemetry.proto.profiles.v1development.ProfilesProto.internal_static_opentelemetry_proto_profiles_v1development_ScopeProfiles_descriptor;
    }

    @java.lang.Override
    public io.opentelemetry.proto.profiles.v1development.ScopeProfiles getDefaultInstanceForType() {
      return io.opentelemetry.proto.profiles.v1development.ScopeProfiles.getDefaultInstance();
    }

    @java.lang.Override
    public io.opentelemetry.proto.profiles.v1development.ScopeProfiles build() {
      io.opentelemetry.proto.profiles.v1development.ScopeProfiles result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.opentelemetry.proto.profiles.v1development.ScopeProfiles buildPartial() {
      io.opentelemetry.proto.profiles.v1development.ScopeProfiles result = new io.opentelemetry.proto.profiles.v1development.ScopeProfiles(this);
      int from_bitField0_ = bitField0_;
      if (scopeBuilder_ == null) {
        result.scope_ = scope_;
      } else {
        result.scope_ = scopeBuilder_.build();
      }
      if (profilesBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          profiles_ = java.util.Collections.unmodifiableList(profiles_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.profiles_ = profiles_;
      } else {
        result.profiles_ = profilesBuilder_.build();
      }
      result.schemaUrl_ = schemaUrl_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.opentelemetry.proto.profiles.v1development.ScopeProfiles) {
        return mergeFrom((io.opentelemetry.proto.profiles.v1development.ScopeProfiles)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.opentelemetry.proto.profiles.v1development.ScopeProfiles other) {
      if (other == io.opentelemetry.proto.profiles.v1development.ScopeProfiles.getDefaultInstance()) return this;
      if (other.hasScope()) {
        mergeScope(other.getScope());
      }
      if (profilesBuilder_ == null) {
        if (!other.profiles_.isEmpty()) {
          if (profiles_.isEmpty()) {
            profiles_ = other.profiles_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureProfilesIsMutable();
            profiles_.addAll(other.profiles_);
          }
          onChanged();
        }
      } else {
        if (!other.profiles_.isEmpty()) {
          if (profilesBuilder_.isEmpty()) {
            profilesBuilder_.dispose();
            profilesBuilder_ = null;
            profiles_ = other.profiles_;
            bitField0_ = (bitField0_ & ~0x00000001);
            profilesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getProfilesFieldBuilder() : null;
          } else {
            profilesBuilder_.addAllMessages(other.profiles_);
          }
        }
      }
      if (!other.getSchemaUrl().isEmpty()) {
        schemaUrl_ = other.schemaUrl_;
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.opentelemetry.proto.profiles.v1development.ScopeProfiles parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.opentelemetry.proto.profiles.v1development.ScopeProfiles) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private io.opentelemetry.proto.common.v1.InstrumentationScope scope_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.opentelemetry.proto.common.v1.InstrumentationScope, io.opentelemetry.proto.common.v1.InstrumentationScope.Builder, io.opentelemetry.proto.common.v1.InstrumentationScopeOrBuilder> scopeBuilder_;
    /**
     * <pre>
     * The instrumentation scope information for the profiles in this message.
     * Semantically when InstrumentationScope isn't set, it is equivalent with
     * an empty instrumentation scope name (unknown).
     * </pre>
     *
     * <code>.opentelemetry.proto.common.v1.InstrumentationScope scope = 1;</code>
     * @return Whether the scope field is set.
     */
    public boolean hasScope() {
      return scopeBuilder_ != null || scope_ != null;
    }
    /**
     * <pre>
     * The instrumentation scope information for the profiles in this message.
     * Semantically when InstrumentationScope isn't set, it is equivalent with
     * an empty instrumentation scope name (unknown).
     * </pre>
     *
     * <code>.opentelemetry.proto.common.v1.InstrumentationScope scope = 1;</code>
     * @return The scope.
     */
    public io.opentelemetry.proto.common.v1.InstrumentationScope getScope() {
      if (scopeBuilder_ == null) {
        return scope_ == null ? io.opentelemetry.proto.common.v1.InstrumentationScope.getDefaultInstance() : scope_;
      } else {
        return scopeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The instrumentation scope information for the profiles in this message.
     * Semantically when InstrumentationScope isn't set, it is equivalent with
     * an empty instrumentation scope name (unknown).
     * </pre>
     *
     * <code>.opentelemetry.proto.common.v1.InstrumentationScope scope = 1;</code>
     */
    public Builder setScope(io.opentelemetry.proto.common.v1.InstrumentationScope value) {
      if (scopeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        scope_ = value;
        onChanged();
      } else {
        scopeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The instrumentation scope information for the profiles in this message.
     * Semantically when InstrumentationScope isn't set, it is equivalent with
     * an empty instrumentation scope name (unknown).
     * </pre>
     *
     * <code>.opentelemetry.proto.common.v1.InstrumentationScope scope = 1;</code>
     */
    public Builder setScope(
        io.opentelemetry.proto.common.v1.InstrumentationScope.Builder builderForValue) {
      if (scopeBuilder_ == null) {
        scope_ = builderForValue.build();
        onChanged();
      } else {
        scopeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The instrumentation scope information for the profiles in this message.
     * Semantically when InstrumentationScope isn't set, it is equivalent with
     * an empty instrumentation scope name (unknown).
     * </pre>
     *
     * <code>.opentelemetry.proto.common.v1.InstrumentationScope scope = 1;</code>
     */
    public Builder mergeScope(io.opentelemetry.proto.common.v1.InstrumentationScope value) {
      if (scopeBuilder_ == null) {
        if (scope_ != null) {
          scope_ =
            io.opentelemetry.proto.common.v1.InstrumentationScope.newBuilder(scope_).mergeFrom(value).buildPartial();
        } else {
          scope_ = value;
        }
        onChanged();
      } else {
        scopeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The instrumentation scope information for the profiles in this message.
     * Semantically when InstrumentationScope isn't set, it is equivalent with
     * an empty instrumentation scope name (unknown).
     * </pre>
     *
     * <code>.opentelemetry.proto.common.v1.InstrumentationScope scope = 1;</code>
     */
    public Builder clearScope() {
      if (scopeBuilder_ == null) {
        scope_ = null;
        onChanged();
      } else {
        scope_ = null;
        scopeBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The instrumentation scope information for the profiles in this message.
     * Semantically when InstrumentationScope isn't set, it is equivalent with
     * an empty instrumentation scope name (unknown).
     * </pre>
     *
     * <code>.opentelemetry.proto.common.v1.InstrumentationScope scope = 1;</code>
     */
    public io.opentelemetry.proto.common.v1.InstrumentationScope.Builder getScopeBuilder() {
      
      onChanged();
      return getScopeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The instrumentation scope information for the profiles in this message.
     * Semantically when InstrumentationScope isn't set, it is equivalent with
     * an empty instrumentation scope name (unknown).
     * </pre>
     *
     * <code>.opentelemetry.proto.common.v1.InstrumentationScope scope = 1;</code>
     */
    public io.opentelemetry.proto.common.v1.InstrumentationScopeOrBuilder getScopeOrBuilder() {
      if (scopeBuilder_ != null) {
        return scopeBuilder_.getMessageOrBuilder();
      } else {
        return scope_ == null ?
            io.opentelemetry.proto.common.v1.InstrumentationScope.getDefaultInstance() : scope_;
      }
    }
    /**
     * <pre>
     * The instrumentation scope information for the profiles in this message.
     * Semantically when InstrumentationScope isn't set, it is equivalent with
     * an empty instrumentation scope name (unknown).
     * </pre>
     *
     * <code>.opentelemetry.proto.common.v1.InstrumentationScope scope = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.opentelemetry.proto.common.v1.InstrumentationScope, io.opentelemetry.proto.common.v1.InstrumentationScope.Builder, io.opentelemetry.proto.common.v1.InstrumentationScopeOrBuilder> 
        getScopeFieldBuilder() {
      if (scopeBuilder_ == null) {
        scopeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.opentelemetry.proto.common.v1.InstrumentationScope, io.opentelemetry.proto.common.v1.InstrumentationScope.Builder, io.opentelemetry.proto.common.v1.InstrumentationScopeOrBuilder>(
                getScope(),
                getParentForChildren(),
                isClean());
        scope_ = null;
      }
      return scopeBuilder_;
    }

    private java.util.List<io.opentelemetry.proto.profiles.v1development.Profile> profiles_ =
      java.util.Collections.emptyList();
    private void ensureProfilesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        profiles_ = new java.util.ArrayList<io.opentelemetry.proto.profiles.v1development.Profile>(profiles_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.opentelemetry.proto.profiles.v1development.Profile, io.opentelemetry.proto.profiles.v1development.Profile.Builder, io.opentelemetry.proto.profiles.v1development.ProfileOrBuilder> profilesBuilder_;

    /**
     * <pre>
     * A list of Profiles that originate from an instrumentation scope.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.profiles.v1development.Profile profiles = 2;</code>
     */
    public java.util.List<io.opentelemetry.proto.profiles.v1development.Profile> getProfilesList() {
      if (profilesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(profiles_);
      } else {
        return profilesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * A list of Profiles that originate from an instrumentation scope.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.profiles.v1development.Profile profiles = 2;</code>
     */
    public int getProfilesCount() {
      if (profilesBuilder_ == null) {
        return profiles_.size();
      } else {
        return profilesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * A list of Profiles that originate from an instrumentation scope.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.profiles.v1development.Profile profiles = 2;</code>
     */
    public io.opentelemetry.proto.profiles.v1development.Profile getProfiles(int index) {
      if (profilesBuilder_ == null) {
        return profiles_.get(index);
      } else {
        return profilesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * A list of Profiles that originate from an instrumentation scope.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.profiles.v1development.Profile profiles = 2;</code>
     */
    public Builder setProfiles(
        int index, io.opentelemetry.proto.profiles.v1development.Profile value) {
      if (profilesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureProfilesIsMutable();
        profiles_.set(index, value);
        onChanged();
      } else {
        profilesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of Profiles that originate from an instrumentation scope.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.profiles.v1development.Profile profiles = 2;</code>
     */
    public Builder setProfiles(
        int index, io.opentelemetry.proto.profiles.v1development.Profile.Builder builderForValue) {
      if (profilesBuilder_ == null) {
        ensureProfilesIsMutable();
        profiles_.set(index, builderForValue.build());
        onChanged();
      } else {
        profilesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of Profiles that originate from an instrumentation scope.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.profiles.v1development.Profile profiles = 2;</code>
     */
    public Builder addProfiles(io.opentelemetry.proto.profiles.v1development.Profile value) {
      if (profilesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureProfilesIsMutable();
        profiles_.add(value);
        onChanged();
      } else {
        profilesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of Profiles that originate from an instrumentation scope.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.profiles.v1development.Profile profiles = 2;</code>
     */
    public Builder addProfiles(
        int index, io.opentelemetry.proto.profiles.v1development.Profile value) {
      if (profilesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureProfilesIsMutable();
        profiles_.add(index, value);
        onChanged();
      } else {
        profilesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of Profiles that originate from an instrumentation scope.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.profiles.v1development.Profile profiles = 2;</code>
     */
    public Builder addProfiles(
        io.opentelemetry.proto.profiles.v1development.Profile.Builder builderForValue) {
      if (profilesBuilder_ == null) {
        ensureProfilesIsMutable();
        profiles_.add(builderForValue.build());
        onChanged();
      } else {
        profilesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of Profiles that originate from an instrumentation scope.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.profiles.v1development.Profile profiles = 2;</code>
     */
    public Builder addProfiles(
        int index, io.opentelemetry.proto.profiles.v1development.Profile.Builder builderForValue) {
      if (profilesBuilder_ == null) {
        ensureProfilesIsMutable();
        profiles_.add(index, builderForValue.build());
        onChanged();
      } else {
        profilesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of Profiles that originate from an instrumentation scope.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.profiles.v1development.Profile profiles = 2;</code>
     */
    public Builder addAllProfiles(
        java.lang.Iterable<? extends io.opentelemetry.proto.profiles.v1development.Profile> values) {
      if (profilesBuilder_ == null) {
        ensureProfilesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, profiles_);
        onChanged();
      } else {
        profilesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * A list of Profiles that originate from an instrumentation scope.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.profiles.v1development.Profile profiles = 2;</code>
     */
    public Builder clearProfiles() {
      if (profilesBuilder_ == null) {
        profiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        profilesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A list of Profiles that originate from an instrumentation scope.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.profiles.v1development.Profile profiles = 2;</code>
     */
    public Builder removeProfiles(int index) {
      if (profilesBuilder_ == null) {
        ensureProfilesIsMutable();
        profiles_.remove(index);
        onChanged();
      } else {
        profilesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * A list of Profiles that originate from an instrumentation scope.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.profiles.v1development.Profile profiles = 2;</code>
     */
    public io.opentelemetry.proto.profiles.v1development.Profile.Builder getProfilesBuilder(
        int index) {
      return getProfilesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * A list of Profiles that originate from an instrumentation scope.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.profiles.v1development.Profile profiles = 2;</code>
     */
    public io.opentelemetry.proto.profiles.v1development.ProfileOrBuilder getProfilesOrBuilder(
        int index) {
      if (profilesBuilder_ == null) {
        return profiles_.get(index);  } else {
        return profilesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * A list of Profiles that originate from an instrumentation scope.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.profiles.v1development.Profile profiles = 2;</code>
     */
    public java.util.List<? extends io.opentelemetry.proto.profiles.v1development.ProfileOrBuilder> 
         getProfilesOrBuilderList() {
      if (profilesBuilder_ != null) {
        return profilesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(profiles_);
      }
    }
    /**
     * <pre>
     * A list of Profiles that originate from an instrumentation scope.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.profiles.v1development.Profile profiles = 2;</code>
     */
    public io.opentelemetry.proto.profiles.v1development.Profile.Builder addProfilesBuilder() {
      return getProfilesFieldBuilder().addBuilder(
          io.opentelemetry.proto.profiles.v1development.Profile.getDefaultInstance());
    }
    /**
     * <pre>
     * A list of Profiles that originate from an instrumentation scope.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.profiles.v1development.Profile profiles = 2;</code>
     */
    public io.opentelemetry.proto.profiles.v1development.Profile.Builder addProfilesBuilder(
        int index) {
      return getProfilesFieldBuilder().addBuilder(
          index, io.opentelemetry.proto.profiles.v1development.Profile.getDefaultInstance());
    }
    /**
     * <pre>
     * A list of Profiles that originate from an instrumentation scope.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.profiles.v1development.Profile profiles = 2;</code>
     */
    public java.util.List<io.opentelemetry.proto.profiles.v1development.Profile.Builder> 
         getProfilesBuilderList() {
      return getProfilesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.opentelemetry.proto.profiles.v1development.Profile, io.opentelemetry.proto.profiles.v1development.Profile.Builder, io.opentelemetry.proto.profiles.v1development.ProfileOrBuilder> 
        getProfilesFieldBuilder() {
      if (profilesBuilder_ == null) {
        profilesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.opentelemetry.proto.profiles.v1development.Profile, io.opentelemetry.proto.profiles.v1development.Profile.Builder, io.opentelemetry.proto.profiles.v1development.ProfileOrBuilder>(
                profiles_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        profiles_ = null;
      }
      return profilesBuilder_;
    }

    private java.lang.Object schemaUrl_ = "";
    /**
     * <pre>
     * The Schema URL, if known. This is the identifier of the Schema that the profile data
     * is recorded in. Notably, the last part of the URL path is the version number of the
     * schema: http[s]://server[:port]/path/&lt;version&gt;. To learn more about Schema URL see
     * https://opentelemetry.io/docs/specs/otel/schemas/#schema-url
     * This schema_url applies to all profiles in the "profiles" field.
     * </pre>
     *
     * <code>string schema_url = 3;</code>
     * @return The schemaUrl.
     */
    public java.lang.String getSchemaUrl() {
      java.lang.Object ref = schemaUrl_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        schemaUrl_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The Schema URL, if known. This is the identifier of the Schema that the profile data
     * is recorded in. Notably, the last part of the URL path is the version number of the
     * schema: http[s]://server[:port]/path/&lt;version&gt;. To learn more about Schema URL see
     * https://opentelemetry.io/docs/specs/otel/schemas/#schema-url
     * This schema_url applies to all profiles in the "profiles" field.
     * </pre>
     *
     * <code>string schema_url = 3;</code>
     * @return The bytes for schemaUrl.
     */
    public com.google.protobuf.ByteString
        getSchemaUrlBytes() {
      java.lang.Object ref = schemaUrl_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        schemaUrl_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The Schema URL, if known. This is the identifier of the Schema that the profile data
     * is recorded in. Notably, the last part of the URL path is the version number of the
     * schema: http[s]://server[:port]/path/&lt;version&gt;. To learn more about Schema URL see
     * https://opentelemetry.io/docs/specs/otel/schemas/#schema-url
     * This schema_url applies to all profiles in the "profiles" field.
     * </pre>
     *
     * <code>string schema_url = 3;</code>
     * @param value The schemaUrl to set.
     * @return This builder for chaining.
     */
    public Builder setSchemaUrl(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      schemaUrl_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The Schema URL, if known. This is the identifier of the Schema that the profile data
     * is recorded in. Notably, the last part of the URL path is the version number of the
     * schema: http[s]://server[:port]/path/&lt;version&gt;. To learn more about Schema URL see
     * https://opentelemetry.io/docs/specs/otel/schemas/#schema-url
     * This schema_url applies to all profiles in the "profiles" field.
     * </pre>
     *
     * <code>string schema_url = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearSchemaUrl() {
      
      schemaUrl_ = getDefaultInstance().getSchemaUrl();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The Schema URL, if known. This is the identifier of the Schema that the profile data
     * is recorded in. Notably, the last part of the URL path is the version number of the
     * schema: http[s]://server[:port]/path/&lt;version&gt;. To learn more about Schema URL see
     * https://opentelemetry.io/docs/specs/otel/schemas/#schema-url
     * This schema_url applies to all profiles in the "profiles" field.
     * </pre>
     *
     * <code>string schema_url = 3;</code>
     * @param value The bytes for schemaUrl to set.
     * @return This builder for chaining.
     */
    public Builder setSchemaUrlBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      schemaUrl_ = value;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:opentelemetry.proto.profiles.v1development.ScopeProfiles)
  }

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.profiles.v1development.ScopeProfiles)
  private static final io.opentelemetry.proto.profiles.v1development.ScopeProfiles DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.opentelemetry.proto.profiles.v1development.ScopeProfiles();
  }

  public static io.opentelemetry.proto.profiles.v1development.ScopeProfiles getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ScopeProfiles>
      PARSER = new com.google.protobuf.AbstractParser<ScopeProfiles>() {
    @java.lang.Override
    public ScopeProfiles parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ScopeProfiles(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ScopeProfiles> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ScopeProfiles> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.opentelemetry.proto.profiles.v1development.ScopeProfiles getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

