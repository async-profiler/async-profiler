// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/profiles/v1development/profiles.proto

package io.opentelemetry.proto.profiles.v1development;

public interface MappingOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opentelemetry.proto.profiles.v1development.Mapping)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Address at which the binary (or DLL) is loaded into memory.
   * </pre>
   *
   * <code>uint64 memory_start = 1;</code>
   * @return The memoryStart.
   */
  long getMemoryStart();

  /**
   * <pre>
   * The limit of the address range occupied by this mapping.
   * </pre>
   *
   * <code>uint64 memory_limit = 2;</code>
   * @return The memoryLimit.
   */
  long getMemoryLimit();

  /**
   * <pre>
   * Offset in the binary that corresponds to the first mapped address.
   * </pre>
   *
   * <code>uint64 file_offset = 3;</code>
   * @return The fileOffset.
   */
  long getFileOffset();

  /**
   * <pre>
   * The object this entry is loaded from.  This can be a filename on
   * disk for the main binary and shared libraries, or virtual
   * abstractions like "[vdso]".
   * </pre>
   *
   * <code>int32 filename_strindex = 4;</code>
   * @return The filenameStrindex.
   */
  int getFilenameStrindex();

  /**
   * <pre>
   * References to attributes in ProfilesDictionary.attribute_table. [optional]
   * </pre>
   *
   * <code>repeated int32 attribute_indices = 5;</code>
   * @return A list containing the attributeIndices.
   */
  java.util.List<java.lang.Integer> getAttributeIndicesList();
  /**
   * <pre>
   * References to attributes in ProfilesDictionary.attribute_table. [optional]
   * </pre>
   *
   * <code>repeated int32 attribute_indices = 5;</code>
   * @return The count of attributeIndices.
   */
  int getAttributeIndicesCount();
  /**
   * <pre>
   * References to attributes in ProfilesDictionary.attribute_table. [optional]
   * </pre>
   *
   * <code>repeated int32 attribute_indices = 5;</code>
   * @param index The index of the element to return.
   * @return The attributeIndices at the given index.
   */
  int getAttributeIndices(int index);

  /**
   * <pre>
   * The following fields indicate the resolution of symbolic info.
   * </pre>
   *
   * <code>bool has_functions = 6;</code>
   * @return The hasFunctions.
   */
  boolean getHasFunctions();

  /**
   * <code>bool has_filenames = 7;</code>
   * @return The hasFilenames.
   */
  boolean getHasFilenames();

  /**
   * <code>bool has_line_numbers = 8;</code>
   * @return The hasLineNumbers.
   */
  boolean getHasLineNumbers();

  /**
   * <code>bool has_inline_frames = 9;</code>
   * @return The hasInlineFrames.
   */
  boolean getHasInlineFrames();
}
