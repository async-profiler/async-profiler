// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/profiles/v1development/profiles.proto

package io.opentelemetry.proto.profiles.v1development;

public interface ProfileOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opentelemetry.proto.profiles.v1development.Profile)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * A description of the samples associated with each Sample.value.
   * For a cpu profile this might be:
   *   [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
   * For a heap profile, this might be:
   *   [["allocations","count"], ["space","bytes"]],
   * If one of the values represents the number of events represented
   * by the sample, by convention it should be at index 0 and use
   * sample_type.unit == "count".
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.profiles.v1development.ValueType sample_type = 1;</code>
   */
  java.util.List<io.opentelemetry.proto.profiles.v1development.ValueType> 
      getSampleTypeList();
  /**
   * <pre>
   * A description of the samples associated with each Sample.value.
   * For a cpu profile this might be:
   *   [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
   * For a heap profile, this might be:
   *   [["allocations","count"], ["space","bytes"]],
   * If one of the values represents the number of events represented
   * by the sample, by convention it should be at index 0 and use
   * sample_type.unit == "count".
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.profiles.v1development.ValueType sample_type = 1;</code>
   */
  io.opentelemetry.proto.profiles.v1development.ValueType getSampleType(int index);
  /**
   * <pre>
   * A description of the samples associated with each Sample.value.
   * For a cpu profile this might be:
   *   [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
   * For a heap profile, this might be:
   *   [["allocations","count"], ["space","bytes"]],
   * If one of the values represents the number of events represented
   * by the sample, by convention it should be at index 0 and use
   * sample_type.unit == "count".
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.profiles.v1development.ValueType sample_type = 1;</code>
   */
  int getSampleTypeCount();
  /**
   * <pre>
   * A description of the samples associated with each Sample.value.
   * For a cpu profile this might be:
   *   [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
   * For a heap profile, this might be:
   *   [["allocations","count"], ["space","bytes"]],
   * If one of the values represents the number of events represented
   * by the sample, by convention it should be at index 0 and use
   * sample_type.unit == "count".
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.profiles.v1development.ValueType sample_type = 1;</code>
   */
  java.util.List<? extends io.opentelemetry.proto.profiles.v1development.ValueTypeOrBuilder> 
      getSampleTypeOrBuilderList();
  /**
   * <pre>
   * A description of the samples associated with each Sample.value.
   * For a cpu profile this might be:
   *   [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
   * For a heap profile, this might be:
   *   [["allocations","count"], ["space","bytes"]],
   * If one of the values represents the number of events represented
   * by the sample, by convention it should be at index 0 and use
   * sample_type.unit == "count".
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.profiles.v1development.ValueType sample_type = 1;</code>
   */
  io.opentelemetry.proto.profiles.v1development.ValueTypeOrBuilder getSampleTypeOrBuilder(
      int index);

  /**
   * <pre>
   * The set of samples recorded in this profile.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.profiles.v1development.Sample sample = 2;</code>
   */
  java.util.List<io.opentelemetry.proto.profiles.v1development.Sample> 
      getSampleList();
  /**
   * <pre>
   * The set of samples recorded in this profile.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.profiles.v1development.Sample sample = 2;</code>
   */
  io.opentelemetry.proto.profiles.v1development.Sample getSample(int index);
  /**
   * <pre>
   * The set of samples recorded in this profile.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.profiles.v1development.Sample sample = 2;</code>
   */
  int getSampleCount();
  /**
   * <pre>
   * The set of samples recorded in this profile.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.profiles.v1development.Sample sample = 2;</code>
   */
  java.util.List<? extends io.opentelemetry.proto.profiles.v1development.SampleOrBuilder> 
      getSampleOrBuilderList();
  /**
   * <pre>
   * The set of samples recorded in this profile.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.profiles.v1development.Sample sample = 2;</code>
   */
  io.opentelemetry.proto.profiles.v1development.SampleOrBuilder getSampleOrBuilder(
      int index);

  /**
   * <pre>
   * References to locations in ProfilesDictionary.location_table.
   * </pre>
   *
   * <code>repeated int32 location_indices = 3;</code>
   * @return A list containing the locationIndices.
   */
  java.util.List<java.lang.Integer> getLocationIndicesList();
  /**
   * <pre>
   * References to locations in ProfilesDictionary.location_table.
   * </pre>
   *
   * <code>repeated int32 location_indices = 3;</code>
   * @return The count of locationIndices.
   */
  int getLocationIndicesCount();
  /**
   * <pre>
   * References to locations in ProfilesDictionary.location_table.
   * </pre>
   *
   * <code>repeated int32 location_indices = 3;</code>
   * @param index The index of the element to return.
   * @return The locationIndices at the given index.
   */
  int getLocationIndices(int index);

  /**
   * <pre>
   * Time of collection (UTC) represented as nanoseconds past the epoch.
   * </pre>
   *
   * <code>int64 time_nanos = 4;</code>
   * @return The timeNanos.
   */
  long getTimeNanos();

  /**
   * <pre>
   * Duration of the profile, if a duration makes sense.
   * </pre>
   *
   * <code>int64 duration_nanos = 5;</code>
   * @return The durationNanos.
   */
  long getDurationNanos();

  /**
   * <pre>
   * The kind of events between sampled occurrences.
   * e.g [ "cpu","cycles" ] or [ "heap","bytes" ]
   * </pre>
   *
   * <code>.opentelemetry.proto.profiles.v1development.ValueType period_type = 6;</code>
   * @return Whether the periodType field is set.
   */
  boolean hasPeriodType();
  /**
   * <pre>
   * The kind of events between sampled occurrences.
   * e.g [ "cpu","cycles" ] or [ "heap","bytes" ]
   * </pre>
   *
   * <code>.opentelemetry.proto.profiles.v1development.ValueType period_type = 6;</code>
   * @return The periodType.
   */
  io.opentelemetry.proto.profiles.v1development.ValueType getPeriodType();
  /**
   * <pre>
   * The kind of events between sampled occurrences.
   * e.g [ "cpu","cycles" ] or [ "heap","bytes" ]
   * </pre>
   *
   * <code>.opentelemetry.proto.profiles.v1development.ValueType period_type = 6;</code>
   */
  io.opentelemetry.proto.profiles.v1development.ValueTypeOrBuilder getPeriodTypeOrBuilder();

  /**
   * <pre>
   * The number of events between sampled occurrences.
   * </pre>
   *
   * <code>int64 period = 7;</code>
   * @return The period.
   */
  long getPeriod();

  /**
   * <pre>
   * Free-form text associated with the profile. The text is displayed as is
   * to the user by the tools that read profiles (e.g. by pprof). This field
   * should not be used to store any machine-readable information, it is only
   * for human-friendly content. The profile must stay functional if this field
   * is cleaned.
   * </pre>
   *
   * <code>repeated int32 comment_strindices = 8;</code>
   * @return A list containing the commentStrindices.
   */
  java.util.List<java.lang.Integer> getCommentStrindicesList();
  /**
   * <pre>
   * Free-form text associated with the profile. The text is displayed as is
   * to the user by the tools that read profiles (e.g. by pprof). This field
   * should not be used to store any machine-readable information, it is only
   * for human-friendly content. The profile must stay functional if this field
   * is cleaned.
   * </pre>
   *
   * <code>repeated int32 comment_strindices = 8;</code>
   * @return The count of commentStrindices.
   */
  int getCommentStrindicesCount();
  /**
   * <pre>
   * Free-form text associated with the profile. The text is displayed as is
   * to the user by the tools that read profiles (e.g. by pprof). This field
   * should not be used to store any machine-readable information, it is only
   * for human-friendly content. The profile must stay functional if this field
   * is cleaned.
   * </pre>
   *
   * <code>repeated int32 comment_strindices = 8;</code>
   * @param index The index of the element to return.
   * @return The commentStrindices at the given index.
   */
  int getCommentStrindices(int index);

  /**
   * <pre>
   * Index into the sample_type array to the default sample type.
   * </pre>
   *
   * <code>int32 default_sample_type_index = 9;</code>
   * @return The defaultSampleTypeIndex.
   */
  int getDefaultSampleTypeIndex();

  /**
   * <pre>
   * A globally unique identifier for a profile. The ID is a 16-byte array. An ID with
   * all zeroes is considered invalid.
   * This field is required.
   * </pre>
   *
   * <code>bytes profile_id = 10;</code>
   * @return The profileId.
   */
  com.google.protobuf.ByteString getProfileId();

  /**
   * <pre>
   * dropped_attributes_count is the number of attributes that were discarded. Attributes
   * can be discarded because their keys are too long or because there are too many
   * attributes. If this value is 0, then no attributes were dropped.
   * </pre>
   *
   * <code>uint32 dropped_attributes_count = 11;</code>
   * @return The droppedAttributesCount.
   */
  int getDroppedAttributesCount();

  /**
   * <pre>
   * Specifies format of the original payload. Common values are defined in semantic conventions. [required if original_payload is present]
   * </pre>
   *
   * <code>string original_payload_format = 12;</code>
   * @return The originalPayloadFormat.
   */
  java.lang.String getOriginalPayloadFormat();
  /**
   * <pre>
   * Specifies format of the original payload. Common values are defined in semantic conventions. [required if original_payload is present]
   * </pre>
   *
   * <code>string original_payload_format = 12;</code>
   * @return The bytes for originalPayloadFormat.
   */
  com.google.protobuf.ByteString
      getOriginalPayloadFormatBytes();

  /**
   * <pre>
   * Original payload can be stored in this field. This can be useful for users who want to get the original payload.
   * Formats such as JFR are highly extensible and can contain more information than what is defined in this spec.
   * Inclusion of original payload should be configurable by the user. Default behavior should be to not include the original payload.
   * If the original payload is in pprof format, it SHOULD not be included in this field.
   * The field is optional, however if it is present then equivalent converted data should be populated in other fields
   * of this message as far as is practicable.
   * </pre>
   *
   * <code>bytes original_payload = 13;</code>
   * @return The originalPayload.
   */
  com.google.protobuf.ByteString getOriginalPayload();

  /**
   * <pre>
   * References to attributes in attribute_table. [optional]
   * It is a collection of key/value pairs. Note, global attributes
   * like server name can be set using the resource API. Examples of attributes:
   *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
   *     "/http/server_latency": 300
   *     "abc.com/myattribute": true
   *     "abc.com/score": 10.239
   * The OpenTelemetry API specification further restricts the allowed value types:
   * https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
   * Attribute keys MUST be unique (it is not allowed to have more than one
   * attribute with the same key).
   * </pre>
   *
   * <code>repeated int32 attribute_indices = 14;</code>
   * @return A list containing the attributeIndices.
   */
  java.util.List<java.lang.Integer> getAttributeIndicesList();
  /**
   * <pre>
   * References to attributes in attribute_table. [optional]
   * It is a collection of key/value pairs. Note, global attributes
   * like server name can be set using the resource API. Examples of attributes:
   *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
   *     "/http/server_latency": 300
   *     "abc.com/myattribute": true
   *     "abc.com/score": 10.239
   * The OpenTelemetry API specification further restricts the allowed value types:
   * https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
   * Attribute keys MUST be unique (it is not allowed to have more than one
   * attribute with the same key).
   * </pre>
   *
   * <code>repeated int32 attribute_indices = 14;</code>
   * @return The count of attributeIndices.
   */
  int getAttributeIndicesCount();
  /**
   * <pre>
   * References to attributes in attribute_table. [optional]
   * It is a collection of key/value pairs. Note, global attributes
   * like server name can be set using the resource API. Examples of attributes:
   *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
   *     "/http/server_latency": 300
   *     "abc.com/myattribute": true
   *     "abc.com/score": 10.239
   * The OpenTelemetry API specification further restricts the allowed value types:
   * https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
   * Attribute keys MUST be unique (it is not allowed to have more than one
   * attribute with the same key).
   * </pre>
   *
   * <code>repeated int32 attribute_indices = 14;</code>
   * @param index The index of the element to return.
   * @return The attributeIndices at the given index.
   */
  int getAttributeIndices(int index);
}
