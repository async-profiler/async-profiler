// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/profiles/v1development/profiles.proto

package io.opentelemetry.proto.profiles.v1development;

public interface ProfilesDataOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opentelemetry.proto.profiles.v1development.ProfilesData)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * An array of ResourceProfiles.
   * For data coming from an SDK profiler, this array will typically contain one
   * element. Host-level profilers will usually create one ResourceProfile per
   * container, as well as one additional ResourceProfile grouping all samples
   * from non-containerized processes.
   * Other resource groupings are possible as well and clarified via
   * Resource.attributes and semantic conventions.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.profiles.v1development.ResourceProfiles resource_profiles = 1;</code>
   */
  java.util.List<io.opentelemetry.proto.profiles.v1development.ResourceProfiles> 
      getResourceProfilesList();
  /**
   * <pre>
   * An array of ResourceProfiles.
   * For data coming from an SDK profiler, this array will typically contain one
   * element. Host-level profilers will usually create one ResourceProfile per
   * container, as well as one additional ResourceProfile grouping all samples
   * from non-containerized processes.
   * Other resource groupings are possible as well and clarified via
   * Resource.attributes and semantic conventions.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.profiles.v1development.ResourceProfiles resource_profiles = 1;</code>
   */
  io.opentelemetry.proto.profiles.v1development.ResourceProfiles getResourceProfiles(int index);
  /**
   * <pre>
   * An array of ResourceProfiles.
   * For data coming from an SDK profiler, this array will typically contain one
   * element. Host-level profilers will usually create one ResourceProfile per
   * container, as well as one additional ResourceProfile grouping all samples
   * from non-containerized processes.
   * Other resource groupings are possible as well and clarified via
   * Resource.attributes and semantic conventions.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.profiles.v1development.ResourceProfiles resource_profiles = 1;</code>
   */
  int getResourceProfilesCount();
  /**
   * <pre>
   * An array of ResourceProfiles.
   * For data coming from an SDK profiler, this array will typically contain one
   * element. Host-level profilers will usually create one ResourceProfile per
   * container, as well as one additional ResourceProfile grouping all samples
   * from non-containerized processes.
   * Other resource groupings are possible as well and clarified via
   * Resource.attributes and semantic conventions.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.profiles.v1development.ResourceProfiles resource_profiles = 1;</code>
   */
  java.util.List<? extends io.opentelemetry.proto.profiles.v1development.ResourceProfilesOrBuilder> 
      getResourceProfilesOrBuilderList();
  /**
   * <pre>
   * An array of ResourceProfiles.
   * For data coming from an SDK profiler, this array will typically contain one
   * element. Host-level profilers will usually create one ResourceProfile per
   * container, as well as one additional ResourceProfile grouping all samples
   * from non-containerized processes.
   * Other resource groupings are possible as well and clarified via
   * Resource.attributes and semantic conventions.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.profiles.v1development.ResourceProfiles resource_profiles = 1;</code>
   */
  io.opentelemetry.proto.profiles.v1development.ResourceProfilesOrBuilder getResourceProfilesOrBuilder(
      int index);

  /**
   * <pre>
   * One instance of ProfilesDictionary
   * </pre>
   *
   * <code>.opentelemetry.proto.profiles.v1development.ProfilesDictionary dictionary = 2;</code>
   * @return Whether the dictionary field is set.
   */
  boolean hasDictionary();
  /**
   * <pre>
   * One instance of ProfilesDictionary
   * </pre>
   *
   * <code>.opentelemetry.proto.profiles.v1development.ProfilesDictionary dictionary = 2;</code>
   * @return The dictionary.
   */
  io.opentelemetry.proto.profiles.v1development.ProfilesDictionary getDictionary();
  /**
   * <pre>
   * One instance of ProfilesDictionary
   * </pre>
   *
   * <code>.opentelemetry.proto.profiles.v1development.ProfilesDictionary dictionary = 2;</code>
   */
  io.opentelemetry.proto.profiles.v1development.ProfilesDictionaryOrBuilder getDictionaryOrBuilder();
}
