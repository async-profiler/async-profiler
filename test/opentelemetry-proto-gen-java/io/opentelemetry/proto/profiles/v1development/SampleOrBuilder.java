// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/profiles/v1development/profiles.proto

package io.opentelemetry.proto.profiles.v1development;

public interface SampleOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opentelemetry.proto.profiles.v1development.Sample)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * locations_start_index along with locations_length refers to to a slice of locations in Profile.location_indices.
   * </pre>
   *
   * <code>int32 locations_start_index = 1;</code>
   * @return The locationsStartIndex.
   */
  int getLocationsStartIndex();

  /**
   * <pre>
   * locations_length along with locations_start_index refers to a slice of locations in Profile.location_indices.
   * Supersedes location_index.
   * </pre>
   *
   * <code>int32 locations_length = 2;</code>
   * @return The locationsLength.
   */
  int getLocationsLength();

  /**
   * <pre>
   * The type and unit of each value is defined by the corresponding
   * entry in Profile.sample_type. All samples must have the same
   * number of values, the same as the length of Profile.sample_type.
   * When aggregating multiple samples into a single sample, the
   * result has a list of values that is the element-wise sum of the
   * lists of the originals.
   * </pre>
   *
   * <code>repeated int64 value = 3;</code>
   * @return A list containing the value.
   */
  java.util.List<java.lang.Long> getValueList();
  /**
   * <pre>
   * The type and unit of each value is defined by the corresponding
   * entry in Profile.sample_type. All samples must have the same
   * number of values, the same as the length of Profile.sample_type.
   * When aggregating multiple samples into a single sample, the
   * result has a list of values that is the element-wise sum of the
   * lists of the originals.
   * </pre>
   *
   * <code>repeated int64 value = 3;</code>
   * @return The count of value.
   */
  int getValueCount();
  /**
   * <pre>
   * The type and unit of each value is defined by the corresponding
   * entry in Profile.sample_type. All samples must have the same
   * number of values, the same as the length of Profile.sample_type.
   * When aggregating multiple samples into a single sample, the
   * result has a list of values that is the element-wise sum of the
   * lists of the originals.
   * </pre>
   *
   * <code>repeated int64 value = 3;</code>
   * @param index The index of the element to return.
   * @return The value at the given index.
   */
  long getValue(int index);

  /**
   * <pre>
   * References to attributes in ProfilesDictionary.attribute_table. [optional]
   * </pre>
   *
   * <code>repeated int32 attribute_indices = 4;</code>
   * @return A list containing the attributeIndices.
   */
  java.util.List<java.lang.Integer> getAttributeIndicesList();
  /**
   * <pre>
   * References to attributes in ProfilesDictionary.attribute_table. [optional]
   * </pre>
   *
   * <code>repeated int32 attribute_indices = 4;</code>
   * @return The count of attributeIndices.
   */
  int getAttributeIndicesCount();
  /**
   * <pre>
   * References to attributes in ProfilesDictionary.attribute_table. [optional]
   * </pre>
   *
   * <code>repeated int32 attribute_indices = 4;</code>
   * @param index The index of the element to return.
   * @return The attributeIndices at the given index.
   */
  int getAttributeIndices(int index);

  /**
   * <pre>
   * Reference to link in ProfilesDictionary.link_table. [optional]
   * </pre>
   *
   * <code>optional int32 link_index = 5;</code>
   * @return Whether the linkIndex field is set.
   */
  boolean hasLinkIndex();
  /**
   * <pre>
   * Reference to link in ProfilesDictionary.link_table. [optional]
   * </pre>
   *
   * <code>optional int32 link_index = 5;</code>
   * @return The linkIndex.
   */
  int getLinkIndex();

  /**
   * <pre>
   * Timestamps associated with Sample represented in nanoseconds. These timestamps are expected
   * to fall within the Profile's time range. [optional]
   * </pre>
   *
   * <code>repeated uint64 timestamps_unix_nano = 6;</code>
   * @return A list containing the timestampsUnixNano.
   */
  java.util.List<java.lang.Long> getTimestampsUnixNanoList();
  /**
   * <pre>
   * Timestamps associated with Sample represented in nanoseconds. These timestamps are expected
   * to fall within the Profile's time range. [optional]
   * </pre>
   *
   * <code>repeated uint64 timestamps_unix_nano = 6;</code>
   * @return The count of timestampsUnixNano.
   */
  int getTimestampsUnixNanoCount();
  /**
   * <pre>
   * Timestamps associated with Sample represented in nanoseconds. These timestamps are expected
   * to fall within the Profile's time range. [optional]
   * </pre>
   *
   * <code>repeated uint64 timestamps_unix_nano = 6;</code>
   * @param index The index of the element to return.
   * @return The timestampsUnixNano at the given index.
   */
  long getTimestampsUnixNano(int index);
}
