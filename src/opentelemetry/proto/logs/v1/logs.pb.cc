// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/logs/v1/logs.proto

#include "opentelemetry/proto/logs/v1/logs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace opentelemetry {
namespace proto {
namespace logs {
namespace v1 {
PROTOBUF_CONSTEXPR LogsData::LogsData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.resource_logs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogsDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogsDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogsDataDefaultTypeInternal() {}
  union {
    LogsData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogsDataDefaultTypeInternal _LogsData_default_instance_;
PROTOBUF_CONSTEXPR ResourceLogs::ResourceLogs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scope_logs_)*/{}
  , /*decltype(_impl_.schema_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resource_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResourceLogsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceLogsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceLogsDefaultTypeInternal() {}
  union {
    ResourceLogs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceLogsDefaultTypeInternal _ResourceLogs_default_instance_;
PROTOBUF_CONSTEXPR ScopeLogs::ScopeLogs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.log_records_)*/{}
  , /*decltype(_impl_.schema_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.scope_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScopeLogsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScopeLogsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScopeLogsDefaultTypeInternal() {}
  union {
    ScopeLogs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScopeLogsDefaultTypeInternal _ScopeLogs_default_instance_;
PROTOBUF_CONSTEXPR LogRecord::LogRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attributes_)*/{}
  , /*decltype(_impl_.severity_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trace_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.span_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.body_)*/nullptr
  , /*decltype(_impl_.time_unix_nano_)*/uint64_t{0u}
  , /*decltype(_impl_.severity_number_)*/0
  , /*decltype(_impl_.dropped_attributes_count_)*/0u
  , /*decltype(_impl_.observed_time_unix_nano_)*/uint64_t{0u}
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogRecordDefaultTypeInternal() {}
  union {
    LogRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogRecordDefaultTypeInternal _LogRecord_default_instance_;
}  // namespace v1
}  // namespace logs
}  // namespace proto
}  // namespace opentelemetry
static ::_pb::Metadata file_level_metadata_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto = nullptr;

const uint32_t TableStruct_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogsData, _impl_.resource_logs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::ResourceLogs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::ResourceLogs, _impl_.resource_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::ResourceLogs, _impl_.scope_logs_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::ResourceLogs, _impl_.schema_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::ScopeLogs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::ScopeLogs, _impl_.scope_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::ScopeLogs, _impl_.log_records_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::ScopeLogs, _impl_.schema_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, _impl_.time_unix_nano_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, _impl_.observed_time_unix_nano_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, _impl_.severity_number_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, _impl_.severity_text_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, _impl_.body_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, _impl_.attributes_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, _impl_.dropped_attributes_count_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, _impl_.flags_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, _impl_.trace_id_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, _impl_.span_id_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, _impl_.event_name_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opentelemetry::proto::logs::v1::LogsData)},
  { 7, -1, -1, sizeof(::opentelemetry::proto::logs::v1::ResourceLogs)},
  { 16, -1, -1, sizeof(::opentelemetry::proto::logs::v1::ScopeLogs)},
  { 25, -1, -1, sizeof(::opentelemetry::proto::logs::v1::LogRecord)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::opentelemetry::proto::logs::v1::_LogsData_default_instance_._instance,
  &::opentelemetry::proto::logs::v1::_ResourceLogs_default_instance_._instance,
  &::opentelemetry::proto::logs::v1::_ScopeLogs_default_instance_._instance,
  &::opentelemetry::proto::logs::v1::_LogRecord_default_instance_._instance,
};

const char descriptor_table_protodef_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&opentelemetry/proto/logs/v1/logs.proto"
  "\022\033opentelemetry.proto.logs.v1\032*opentelem"
  "etry/proto/common/v1/common.proto\032.opent"
  "elemetry/proto/resource/v1/resource.prot"
  "o\"L\n\010LogsData\022@\n\rresource_logs\030\001 \003(\0132).o"
  "pentelemetry.proto.logs.v1.ResourceLogs\""
  "\243\001\n\014ResourceLogs\022;\n\010resource\030\001 \001(\0132).ope"
  "ntelemetry.proto.resource.v1.Resource\022:\n"
  "\nscope_logs\030\002 \003(\0132&.opentelemetry.proto."
  "logs.v1.ScopeLogs\022\022\n\nschema_url\030\003 \001(\tJ\006\010"
  "\350\007\020\351\007\"\240\001\n\tScopeLogs\022B\n\005scope\030\001 \001(\01323.ope"
  "ntelemetry.proto.common.v1.Instrumentati"
  "onScope\022;\n\013log_records\030\002 \003(\0132&.opentelem"
  "etry.proto.logs.v1.LogRecord\022\022\n\nschema_u"
  "rl\030\003 \001(\t\"\203\003\n\tLogRecord\022\026\n\016time_unix_nano"
  "\030\001 \001(\006\022\037\n\027observed_time_unix_nano\030\013 \001(\006\022"
  "D\n\017severity_number\030\002 \001(\0162+.opentelemetry"
  ".proto.logs.v1.SeverityNumber\022\025\n\rseverit"
  "y_text\030\003 \001(\t\0225\n\004body\030\005 \001(\0132\'.opentelemet"
  "ry.proto.common.v1.AnyValue\022;\n\nattribute"
  "s\030\006 \003(\0132\'.opentelemetry.proto.common.v1."
  "KeyValue\022 \n\030dropped_attributes_count\030\007 \001"
  "(\r\022\r\n\005flags\030\010 \001(\007\022\020\n\010trace_id\030\t \001(\014\022\017\n\007s"
  "pan_id\030\n \001(\014\022\022\n\nevent_name\030\014 \001(\tJ\004\010\004\020\005*\303"
  "\005\n\016SeverityNumber\022\037\n\033SEVERITY_NUMBER_UNS"
  "PECIFIED\020\000\022\031\n\025SEVERITY_NUMBER_TRACE\020\001\022\032\n"
  "\026SEVERITY_NUMBER_TRACE2\020\002\022\032\n\026SEVERITY_NU"
  "MBER_TRACE3\020\003\022\032\n\026SEVERITY_NUMBER_TRACE4\020"
  "\004\022\031\n\025SEVERITY_NUMBER_DEBUG\020\005\022\032\n\026SEVERITY"
  "_NUMBER_DEBUG2\020\006\022\032\n\026SEVERITY_NUMBER_DEBU"
  "G3\020\007\022\032\n\026SEVERITY_NUMBER_DEBUG4\020\010\022\030\n\024SEVE"
  "RITY_NUMBER_INFO\020\t\022\031\n\025SEVERITY_NUMBER_IN"
  "FO2\020\n\022\031\n\025SEVERITY_NUMBER_INFO3\020\013\022\031\n\025SEVE"
  "RITY_NUMBER_INFO4\020\014\022\030\n\024SEVERITY_NUMBER_W"
  "ARN\020\r\022\031\n\025SEVERITY_NUMBER_WARN2\020\016\022\031\n\025SEVE"
  "RITY_NUMBER_WARN3\020\017\022\031\n\025SEVERITY_NUMBER_W"
  "ARN4\020\020\022\031\n\025SEVERITY_NUMBER_ERROR\020\021\022\032\n\026SEV"
  "ERITY_NUMBER_ERROR2\020\022\022\032\n\026SEVERITY_NUMBER"
  "_ERROR3\020\023\022\032\n\026SEVERITY_NUMBER_ERROR4\020\024\022\031\n"
  "\025SEVERITY_NUMBER_FATAL\020\025\022\032\n\026SEVERITY_NUM"
  "BER_FATAL2\020\026\022\032\n\026SEVERITY_NUMBER_FATAL3\020\027"
  "\022\032\n\026SEVERITY_NUMBER_FATAL4\020\030*Y\n\016LogRecor"
  "dFlags\022\037\n\033LOG_RECORD_FLAGS_DO_NOT_USE\020\000\022"
  "&\n!LOG_RECORD_FLAGS_TRACE_FLAGS_MASK\020\377\001B"
  "s\n\036io.opentelemetry.proto.logs.v1B\tLogsP"
  "rotoP\001Z&go.opentelemetry.io/proto/otlp/l"
  "ogs/v1\252\002\033OpenTelemetry.Proto.Logs.V1b\006pr"
  "oto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto_deps[2] = {
  &::descriptor_table_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto,
  &::descriptor_table_opentelemetry_2fproto_2fresource_2fv1_2fresource_2eproto,
};
static ::_pbi::once_flag descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto = {
    false, false, 1884, descriptor_table_protodef_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto,
    "opentelemetry/proto/logs/v1/logs.proto",
    &descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto_once, descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto_deps, 2, 4,
    schemas, file_default_instances, TableStruct_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto::offsets,
    file_level_metadata_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto, file_level_enum_descriptors_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto,
    file_level_service_descriptors_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto_getter() {
  return &descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto(&descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto);
namespace opentelemetry {
namespace proto {
namespace logs {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SeverityNumber_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto);
  return file_level_enum_descriptors_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto[0];
}
bool SeverityNumber_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogRecordFlags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto);
  return file_level_enum_descriptors_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto[1];
}
bool LogRecordFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 255:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class LogsData::_Internal {
 public:
};

LogsData::LogsData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.logs.v1.LogsData)
}
LogsData::LogsData(const LogsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogsData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_logs_){from._impl_.resource_logs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.logs.v1.LogsData)
}

inline void LogsData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_logs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LogsData::~LogsData() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.logs.v1.LogsData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogsData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.resource_logs_.~RepeatedPtrField();
}

void LogsData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogsData::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.logs.v1.LogsData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.resource_logs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogsData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.logs.v1.ResourceLogs resource_logs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resource_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogsData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.logs.v1.LogsData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.logs.v1.ResourceLogs resource_logs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_resource_logs_size()); i < n; i++) {
    const auto& repfield = this->_internal_resource_logs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.logs.v1.LogsData)
  return target;
}

size_t LogsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.logs.v1.LogsData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.logs.v1.ResourceLogs resource_logs = 1;
  total_size += 1UL * this->_internal_resource_logs_size();
  for (const auto& msg : this->_impl_.resource_logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogsData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogsData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogsData::GetClassData() const { return &_class_data_; }


void LogsData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogsData*>(&to_msg);
  auto& from = static_cast<const LogsData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.logs.v1.LogsData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.resource_logs_.MergeFrom(from._impl_.resource_logs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogsData::CopyFrom(const LogsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.logs.v1.LogsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogsData::IsInitialized() const {
  return true;
}

void LogsData::InternalSwap(LogsData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.resource_logs_.InternalSwap(&other->_impl_.resource_logs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogsData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto_getter, &descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto_once,
      file_level_metadata_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto[0]);
}

// ===================================================================

class ResourceLogs::_Internal {
 public:
  static const ::opentelemetry::proto::resource::v1::Resource& resource(const ResourceLogs* msg);
};

const ::opentelemetry::proto::resource::v1::Resource&
ResourceLogs::_Internal::resource(const ResourceLogs* msg) {
  return *msg->_impl_.resource_;
}
void ResourceLogs::clear_resource() {
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
}
ResourceLogs::ResourceLogs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.logs.v1.ResourceLogs)
}
ResourceLogs::ResourceLogs(const ResourceLogs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResourceLogs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scope_logs_){from._impl_.scope_logs_}
    , decltype(_impl_.schema_url_){}
    , decltype(_impl_.resource_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.schema_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_schema_url().empty()) {
    _this->_impl_.schema_url_.Set(from._internal_schema_url(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_resource()) {
    _this->_impl_.resource_ = new ::opentelemetry::proto::resource::v1::Resource(*from._impl_.resource_);
  }
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.logs.v1.ResourceLogs)
}

inline void ResourceLogs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scope_logs_){arena}
    , decltype(_impl_.schema_url_){}
    , decltype(_impl_.resource_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.schema_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResourceLogs::~ResourceLogs() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.logs.v1.ResourceLogs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResourceLogs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.scope_logs_.~RepeatedPtrField();
  _impl_.schema_url_.Destroy();
  if (this != internal_default_instance()) delete _impl_.resource_;
}

void ResourceLogs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResourceLogs::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.logs.v1.ResourceLogs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.scope_logs_.Clear();
  _impl_.schema_url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceLogs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opentelemetry.proto.resource.v1.Resource resource = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.logs.v1.ScopeLogs scope_logs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scope_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string schema_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_schema_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opentelemetry.proto.logs.v1.ResourceLogs.schema_url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResourceLogs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.logs.v1.ResourceLogs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opentelemetry.proto.resource.v1.Resource resource = 1;
  if (this->_internal_has_resource()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::resource(this),
        _Internal::resource(this).GetCachedSize(), target, stream);
  }

  // repeated .opentelemetry.proto.logs.v1.ScopeLogs scope_logs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_scope_logs_size()); i < n; i++) {
    const auto& repfield = this->_internal_scope_logs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string schema_url = 3;
  if (!this->_internal_schema_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_schema_url().data(), static_cast<int>(this->_internal_schema_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentelemetry.proto.logs.v1.ResourceLogs.schema_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_schema_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.logs.v1.ResourceLogs)
  return target;
}

size_t ResourceLogs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.logs.v1.ResourceLogs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.logs.v1.ScopeLogs scope_logs = 2;
  total_size += 1UL * this->_internal_scope_logs_size();
  for (const auto& msg : this->_impl_.scope_logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string schema_url = 3;
  if (!this->_internal_schema_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_schema_url());
  }

  // .opentelemetry.proto.resource.v1.Resource resource = 1;
  if (this->_internal_has_resource()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.resource_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceLogs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResourceLogs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceLogs::GetClassData() const { return &_class_data_; }


void ResourceLogs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResourceLogs*>(&to_msg);
  auto& from = static_cast<const ResourceLogs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.logs.v1.ResourceLogs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.scope_logs_.MergeFrom(from._impl_.scope_logs_);
  if (!from._internal_schema_url().empty()) {
    _this->_internal_set_schema_url(from._internal_schema_url());
  }
  if (from._internal_has_resource()) {
    _this->_internal_mutable_resource()->::opentelemetry::proto::resource::v1::Resource::MergeFrom(
        from._internal_resource());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceLogs::CopyFrom(const ResourceLogs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.logs.v1.ResourceLogs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceLogs::IsInitialized() const {
  return true;
}

void ResourceLogs::InternalSwap(ResourceLogs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.scope_logs_.InternalSwap(&other->_impl_.scope_logs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.schema_url_, lhs_arena,
      &other->_impl_.schema_url_, rhs_arena
  );
  swap(_impl_.resource_, other->_impl_.resource_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceLogs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto_getter, &descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto_once,
      file_level_metadata_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto[1]);
}

// ===================================================================

class ScopeLogs::_Internal {
 public:
  static const ::opentelemetry::proto::common::v1::InstrumentationScope& scope(const ScopeLogs* msg);
};

const ::opentelemetry::proto::common::v1::InstrumentationScope&
ScopeLogs::_Internal::scope(const ScopeLogs* msg) {
  return *msg->_impl_.scope_;
}
void ScopeLogs::clear_scope() {
  if (GetArenaForAllocation() == nullptr && _impl_.scope_ != nullptr) {
    delete _impl_.scope_;
  }
  _impl_.scope_ = nullptr;
}
ScopeLogs::ScopeLogs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.logs.v1.ScopeLogs)
}
ScopeLogs::ScopeLogs(const ScopeLogs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScopeLogs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.log_records_){from._impl_.log_records_}
    , decltype(_impl_.schema_url_){}
    , decltype(_impl_.scope_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.schema_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_schema_url().empty()) {
    _this->_impl_.schema_url_.Set(from._internal_schema_url(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_scope()) {
    _this->_impl_.scope_ = new ::opentelemetry::proto::common::v1::InstrumentationScope(*from._impl_.scope_);
  }
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.logs.v1.ScopeLogs)
}

inline void ScopeLogs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.log_records_){arena}
    , decltype(_impl_.schema_url_){}
    , decltype(_impl_.scope_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.schema_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScopeLogs::~ScopeLogs() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.logs.v1.ScopeLogs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScopeLogs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.log_records_.~RepeatedPtrField();
  _impl_.schema_url_.Destroy();
  if (this != internal_default_instance()) delete _impl_.scope_;
}

void ScopeLogs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScopeLogs::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.logs.v1.ScopeLogs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.log_records_.Clear();
  _impl_.schema_url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.scope_ != nullptr) {
    delete _impl_.scope_;
  }
  _impl_.scope_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScopeLogs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scope(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.logs.v1.LogRecord log_records = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_log_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string schema_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_schema_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opentelemetry.proto.logs.v1.ScopeLogs.schema_url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScopeLogs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.logs.v1.ScopeLogs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
  if (this->_internal_has_scope()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::scope(this),
        _Internal::scope(this).GetCachedSize(), target, stream);
  }

  // repeated .opentelemetry.proto.logs.v1.LogRecord log_records = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_log_records_size()); i < n; i++) {
    const auto& repfield = this->_internal_log_records(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string schema_url = 3;
  if (!this->_internal_schema_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_schema_url().data(), static_cast<int>(this->_internal_schema_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentelemetry.proto.logs.v1.ScopeLogs.schema_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_schema_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.logs.v1.ScopeLogs)
  return target;
}

size_t ScopeLogs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.logs.v1.ScopeLogs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.logs.v1.LogRecord log_records = 2;
  total_size += 1UL * this->_internal_log_records_size();
  for (const auto& msg : this->_impl_.log_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string schema_url = 3;
  if (!this->_internal_schema_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_schema_url());
  }

  // .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
  if (this->_internal_has_scope()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scope_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScopeLogs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScopeLogs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScopeLogs::GetClassData() const { return &_class_data_; }


void ScopeLogs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScopeLogs*>(&to_msg);
  auto& from = static_cast<const ScopeLogs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.logs.v1.ScopeLogs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.log_records_.MergeFrom(from._impl_.log_records_);
  if (!from._internal_schema_url().empty()) {
    _this->_internal_set_schema_url(from._internal_schema_url());
  }
  if (from._internal_has_scope()) {
    _this->_internal_mutable_scope()->::opentelemetry::proto::common::v1::InstrumentationScope::MergeFrom(
        from._internal_scope());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScopeLogs::CopyFrom(const ScopeLogs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.logs.v1.ScopeLogs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScopeLogs::IsInitialized() const {
  return true;
}

void ScopeLogs::InternalSwap(ScopeLogs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.log_records_.InternalSwap(&other->_impl_.log_records_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.schema_url_, lhs_arena,
      &other->_impl_.schema_url_, rhs_arena
  );
  swap(_impl_.scope_, other->_impl_.scope_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScopeLogs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto_getter, &descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto_once,
      file_level_metadata_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto[2]);
}

// ===================================================================

class LogRecord::_Internal {
 public:
  static const ::opentelemetry::proto::common::v1::AnyValue& body(const LogRecord* msg);
};

const ::opentelemetry::proto::common::v1::AnyValue&
LogRecord::_Internal::body(const LogRecord* msg) {
  return *msg->_impl_.body_;
}
void LogRecord::clear_body() {
  if (GetArenaForAllocation() == nullptr && _impl_.body_ != nullptr) {
    delete _impl_.body_;
  }
  _impl_.body_ = nullptr;
}
void LogRecord::clear_attributes() {
  _impl_.attributes_.Clear();
}
LogRecord::LogRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.logs.v1.LogRecord)
}
LogRecord::LogRecord(const LogRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attributes_){from._impl_.attributes_}
    , decltype(_impl_.severity_text_){}
    , decltype(_impl_.trace_id_){}
    , decltype(_impl_.span_id_){}
    , decltype(_impl_.event_name_){}
    , decltype(_impl_.body_){nullptr}
    , decltype(_impl_.time_unix_nano_){}
    , decltype(_impl_.severity_number_){}
    , decltype(_impl_.dropped_attributes_count_){}
    , decltype(_impl_.observed_time_unix_nano_){}
    , decltype(_impl_.flags_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.severity_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.severity_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_severity_text().empty()) {
    _this->_impl_.severity_text_.Set(from._internal_severity_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.trace_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trace_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trace_id().empty()) {
    _this->_impl_.trace_id_.Set(from._internal_trace_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.span_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.span_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_span_id().empty()) {
    _this->_impl_.span_id_.Set(from._internal_span_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.event_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_name().empty()) {
    _this->_impl_.event_name_.Set(from._internal_event_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_body()) {
    _this->_impl_.body_ = new ::opentelemetry::proto::common::v1::AnyValue(*from._impl_.body_);
  }
  ::memcpy(&_impl_.time_unix_nano_, &from._impl_.time_unix_nano_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flags_) -
    reinterpret_cast<char*>(&_impl_.time_unix_nano_)) + sizeof(_impl_.flags_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.logs.v1.LogRecord)
}

inline void LogRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attributes_){arena}
    , decltype(_impl_.severity_text_){}
    , decltype(_impl_.trace_id_){}
    , decltype(_impl_.span_id_){}
    , decltype(_impl_.event_name_){}
    , decltype(_impl_.body_){nullptr}
    , decltype(_impl_.time_unix_nano_){uint64_t{0u}}
    , decltype(_impl_.severity_number_){0}
    , decltype(_impl_.dropped_attributes_count_){0u}
    , decltype(_impl_.observed_time_unix_nano_){uint64_t{0u}}
    , decltype(_impl_.flags_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.severity_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.severity_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.trace_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trace_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.span_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.span_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.event_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogRecord::~LogRecord() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.logs.v1.LogRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.~RepeatedPtrField();
  _impl_.severity_text_.Destroy();
  _impl_.trace_id_.Destroy();
  _impl_.span_id_.Destroy();
  _impl_.event_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.body_;
}

void LogRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.logs.v1.LogRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _impl_.severity_text_.ClearToEmpty();
  _impl_.trace_id_.ClearToEmpty();
  _impl_.span_id_.ClearToEmpty();
  _impl_.event_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.body_ != nullptr) {
    delete _impl_.body_;
  }
  _impl_.body_ = nullptr;
  ::memset(&_impl_.time_unix_nano_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.flags_) -
      reinterpret_cast<char*>(&_impl_.time_unix_nano_)) + sizeof(_impl_.flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 time_unix_nano = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // .opentelemetry.proto.logs.v1.SeverityNumber severity_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_severity_number(static_cast<::opentelemetry::proto::logs::v1::SeverityNumber>(val));
        } else
          goto handle_unusual;
        continue;
      // string severity_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_severity_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opentelemetry.proto.logs.v1.LogRecord.severity_text"));
        } else
          goto handle_unusual;
        continue;
      // .opentelemetry.proto.common.v1.AnyValue body = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_body(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 dropped_attributes_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.dropped_attributes_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // fixed32 flags = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // bytes trace_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_trace_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes span_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_span_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // fixed64 observed_time_unix_nano = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.observed_time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // string event_name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_event_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opentelemetry.proto.logs.v1.LogRecord.event_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.logs.v1.LogRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 time_unix_nano = 1;
  if (this->_internal_time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_time_unix_nano(), target);
  }

  // .opentelemetry.proto.logs.v1.SeverityNumber severity_number = 2;
  if (this->_internal_severity_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_severity_number(), target);
  }

  // string severity_text = 3;
  if (!this->_internal_severity_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_severity_text().data(), static_cast<int>(this->_internal_severity_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentelemetry.proto.logs.v1.LogRecord.severity_text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_severity_text(), target);
  }

  // .opentelemetry.proto.common.v1.AnyValue body = 5;
  if (this->_internal_has_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::body(this),
        _Internal::body(this).GetCachedSize(), target, stream);
  }

  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attributes_size()); i < n; i++) {
    const auto& repfield = this->_internal_attributes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 dropped_attributes_count = 7;
  if (this->_internal_dropped_attributes_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_dropped_attributes_count(), target);
  }

  // fixed32 flags = 8;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(8, this->_internal_flags(), target);
  }

  // bytes trace_id = 9;
  if (!this->_internal_trace_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_trace_id(), target);
  }

  // bytes span_id = 10;
  if (!this->_internal_span_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_span_id(), target);
  }

  // fixed64 observed_time_unix_nano = 11;
  if (this->_internal_observed_time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(11, this->_internal_observed_time_unix_nano(), target);
  }

  // string event_name = 12;
  if (!this->_internal_event_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_name().data(), static_cast<int>(this->_internal_event_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentelemetry.proto.logs.v1.LogRecord.event_name");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_event_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.logs.v1.LogRecord)
  return target;
}

size_t LogRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.logs.v1.LogRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 6;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->_impl_.attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string severity_text = 3;
  if (!this->_internal_severity_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_severity_text());
  }

  // bytes trace_id = 9;
  if (!this->_internal_trace_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_trace_id());
  }

  // bytes span_id = 10;
  if (!this->_internal_span_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_span_id());
  }

  // string event_name = 12;
  if (!this->_internal_event_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_name());
  }

  // .opentelemetry.proto.common.v1.AnyValue body = 5;
  if (this->_internal_has_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.body_);
  }

  // fixed64 time_unix_nano = 1;
  if (this->_internal_time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // .opentelemetry.proto.logs.v1.SeverityNumber severity_number = 2;
  if (this->_internal_severity_number() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_severity_number());
  }

  // uint32 dropped_attributes_count = 7;
  if (this->_internal_dropped_attributes_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dropped_attributes_count());
  }

  // fixed64 observed_time_unix_nano = 11;
  if (this->_internal_observed_time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // fixed32 flags = 8;
  if (this->_internal_flags() != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogRecord::GetClassData() const { return &_class_data_; }


void LogRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogRecord*>(&to_msg);
  auto& from = static_cast<const LogRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.logs.v1.LogRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (!from._internal_severity_text().empty()) {
    _this->_internal_set_severity_text(from._internal_severity_text());
  }
  if (!from._internal_trace_id().empty()) {
    _this->_internal_set_trace_id(from._internal_trace_id());
  }
  if (!from._internal_span_id().empty()) {
    _this->_internal_set_span_id(from._internal_span_id());
  }
  if (!from._internal_event_name().empty()) {
    _this->_internal_set_event_name(from._internal_event_name());
  }
  if (from._internal_has_body()) {
    _this->_internal_mutable_body()->::opentelemetry::proto::common::v1::AnyValue::MergeFrom(
        from._internal_body());
  }
  if (from._internal_time_unix_nano() != 0) {
    _this->_internal_set_time_unix_nano(from._internal_time_unix_nano());
  }
  if (from._internal_severity_number() != 0) {
    _this->_internal_set_severity_number(from._internal_severity_number());
  }
  if (from._internal_dropped_attributes_count() != 0) {
    _this->_internal_set_dropped_attributes_count(from._internal_dropped_attributes_count());
  }
  if (from._internal_observed_time_unix_nano() != 0) {
    _this->_internal_set_observed_time_unix_nano(from._internal_observed_time_unix_nano());
  }
  if (from._internal_flags() != 0) {
    _this->_internal_set_flags(from._internal_flags());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogRecord::CopyFrom(const LogRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.logs.v1.LogRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRecord::IsInitialized() const {
  return true;
}

void LogRecord::InternalSwap(LogRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.severity_text_, lhs_arena,
      &other->_impl_.severity_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.trace_id_, lhs_arena,
      &other->_impl_.trace_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.span_id_, lhs_arena,
      &other->_impl_.span_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_name_, lhs_arena,
      &other->_impl_.event_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.flags_)
      + sizeof(LogRecord::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.body_)>(
          reinterpret_cast<char*>(&_impl_.body_),
          reinterpret_cast<char*>(&other->_impl_.body_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto_getter, &descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto_once,
      file_level_metadata_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace logs
}  // namespace proto
}  // namespace opentelemetry
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::logs::v1::LogsData*
Arena::CreateMaybeMessage< ::opentelemetry::proto::logs::v1::LogsData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::logs::v1::LogsData >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::logs::v1::ResourceLogs*
Arena::CreateMaybeMessage< ::opentelemetry::proto::logs::v1::ResourceLogs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::logs::v1::ResourceLogs >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::logs::v1::ScopeLogs*
Arena::CreateMaybeMessage< ::opentelemetry::proto::logs::v1::ScopeLogs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::logs::v1::ScopeLogs >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::logs::v1::LogRecord*
Arena::CreateMaybeMessage< ::opentelemetry::proto::logs::v1::LogRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::logs::v1::LogRecord >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
