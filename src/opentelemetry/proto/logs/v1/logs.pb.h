// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/logs/v1/logs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "opentelemetry/proto/common/v1/common.pb.h"
#include "opentelemetry/proto/resource/v1/resource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto;
namespace opentelemetry {
namespace proto {
namespace logs {
namespace v1 {
class LogRecord;
struct LogRecordDefaultTypeInternal;
extern LogRecordDefaultTypeInternal _LogRecord_default_instance_;
class LogsData;
struct LogsDataDefaultTypeInternal;
extern LogsDataDefaultTypeInternal _LogsData_default_instance_;
class ResourceLogs;
struct ResourceLogsDefaultTypeInternal;
extern ResourceLogsDefaultTypeInternal _ResourceLogs_default_instance_;
class ScopeLogs;
struct ScopeLogsDefaultTypeInternal;
extern ScopeLogsDefaultTypeInternal _ScopeLogs_default_instance_;
}  // namespace v1
}  // namespace logs
}  // namespace proto
}  // namespace opentelemetry
PROTOBUF_NAMESPACE_OPEN
template<> ::opentelemetry::proto::logs::v1::LogRecord* Arena::CreateMaybeMessage<::opentelemetry::proto::logs::v1::LogRecord>(Arena*);
template<> ::opentelemetry::proto::logs::v1::LogsData* Arena::CreateMaybeMessage<::opentelemetry::proto::logs::v1::LogsData>(Arena*);
template<> ::opentelemetry::proto::logs::v1::ResourceLogs* Arena::CreateMaybeMessage<::opentelemetry::proto::logs::v1::ResourceLogs>(Arena*);
template<> ::opentelemetry::proto::logs::v1::ScopeLogs* Arena::CreateMaybeMessage<::opentelemetry::proto::logs::v1::ScopeLogs>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opentelemetry {
namespace proto {
namespace logs {
namespace v1 {

enum SeverityNumber : int {
  SEVERITY_NUMBER_UNSPECIFIED = 0,
  SEVERITY_NUMBER_TRACE = 1,
  SEVERITY_NUMBER_TRACE2 = 2,
  SEVERITY_NUMBER_TRACE3 = 3,
  SEVERITY_NUMBER_TRACE4 = 4,
  SEVERITY_NUMBER_DEBUG = 5,
  SEVERITY_NUMBER_DEBUG2 = 6,
  SEVERITY_NUMBER_DEBUG3 = 7,
  SEVERITY_NUMBER_DEBUG4 = 8,
  SEVERITY_NUMBER_INFO = 9,
  SEVERITY_NUMBER_INFO2 = 10,
  SEVERITY_NUMBER_INFO3 = 11,
  SEVERITY_NUMBER_INFO4 = 12,
  SEVERITY_NUMBER_WARN = 13,
  SEVERITY_NUMBER_WARN2 = 14,
  SEVERITY_NUMBER_WARN3 = 15,
  SEVERITY_NUMBER_WARN4 = 16,
  SEVERITY_NUMBER_ERROR = 17,
  SEVERITY_NUMBER_ERROR2 = 18,
  SEVERITY_NUMBER_ERROR3 = 19,
  SEVERITY_NUMBER_ERROR4 = 20,
  SEVERITY_NUMBER_FATAL = 21,
  SEVERITY_NUMBER_FATAL2 = 22,
  SEVERITY_NUMBER_FATAL3 = 23,
  SEVERITY_NUMBER_FATAL4 = 24,
  SeverityNumber_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SeverityNumber_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SeverityNumber_IsValid(int value);
constexpr SeverityNumber SeverityNumber_MIN = SEVERITY_NUMBER_UNSPECIFIED;
constexpr SeverityNumber SeverityNumber_MAX = SEVERITY_NUMBER_FATAL4;
constexpr int SeverityNumber_ARRAYSIZE = SeverityNumber_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SeverityNumber_descriptor();
template<typename T>
inline const std::string& SeverityNumber_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SeverityNumber>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SeverityNumber_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SeverityNumber_descriptor(), enum_t_value);
}
inline bool SeverityNumber_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SeverityNumber* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SeverityNumber>(
    SeverityNumber_descriptor(), name, value);
}
enum LogRecordFlags : int {
  LOG_RECORD_FLAGS_DO_NOT_USE = 0,
  LOG_RECORD_FLAGS_TRACE_FLAGS_MASK = 255,
  LogRecordFlags_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LogRecordFlags_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LogRecordFlags_IsValid(int value);
constexpr LogRecordFlags LogRecordFlags_MIN = LOG_RECORD_FLAGS_DO_NOT_USE;
constexpr LogRecordFlags LogRecordFlags_MAX = LOG_RECORD_FLAGS_TRACE_FLAGS_MASK;
constexpr int LogRecordFlags_ARRAYSIZE = LogRecordFlags_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogRecordFlags_descriptor();
template<typename T>
inline const std::string& LogRecordFlags_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LogRecordFlags>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LogRecordFlags_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LogRecordFlags_descriptor(), enum_t_value);
}
inline bool LogRecordFlags_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LogRecordFlags* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LogRecordFlags>(
    LogRecordFlags_descriptor(), name, value);
}
// ===================================================================

class LogsData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.logs.v1.LogsData) */ {
 public:
  inline LogsData() : LogsData(nullptr) {}
  ~LogsData() override;
  explicit PROTOBUF_CONSTEXPR LogsData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogsData(const LogsData& from);
  LogsData(LogsData&& from) noexcept
    : LogsData() {
    *this = ::std::move(from);
  }

  inline LogsData& operator=(const LogsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogsData& operator=(LogsData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogsData& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogsData* internal_default_instance() {
    return reinterpret_cast<const LogsData*>(
               &_LogsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogsData& a, LogsData& b) {
    a.Swap(&b);
  }
  inline void Swap(LogsData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogsData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogsData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogsData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogsData& from) {
    LogsData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogsData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.logs.v1.LogsData";
  }
  protected:
  explicit LogsData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceLogsFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.logs.v1.ResourceLogs resource_logs = 1;
  int resource_logs_size() const;
  private:
  int _internal_resource_logs_size() const;
  public:
  void clear_resource_logs();
  ::opentelemetry::proto::logs::v1::ResourceLogs* mutable_resource_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::logs::v1::ResourceLogs >*
      mutable_resource_logs();
  private:
  const ::opentelemetry::proto::logs::v1::ResourceLogs& _internal_resource_logs(int index) const;
  ::opentelemetry::proto::logs::v1::ResourceLogs* _internal_add_resource_logs();
  public:
  const ::opentelemetry::proto::logs::v1::ResourceLogs& resource_logs(int index) const;
  ::opentelemetry::proto::logs::v1::ResourceLogs* add_resource_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::logs::v1::ResourceLogs >&
      resource_logs() const;

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.logs.v1.LogsData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::logs::v1::ResourceLogs > resource_logs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto;
};
// -------------------------------------------------------------------

class ResourceLogs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.logs.v1.ResourceLogs) */ {
 public:
  inline ResourceLogs() : ResourceLogs(nullptr) {}
  ~ResourceLogs() override;
  explicit PROTOBUF_CONSTEXPR ResourceLogs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceLogs(const ResourceLogs& from);
  ResourceLogs(ResourceLogs&& from) noexcept
    : ResourceLogs() {
    *this = ::std::move(from);
  }

  inline ResourceLogs& operator=(const ResourceLogs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceLogs& operator=(ResourceLogs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceLogs& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceLogs* internal_default_instance() {
    return reinterpret_cast<const ResourceLogs*>(
               &_ResourceLogs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResourceLogs& a, ResourceLogs& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceLogs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceLogs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceLogs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceLogs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceLogs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResourceLogs& from) {
    ResourceLogs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceLogs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.logs.v1.ResourceLogs";
  }
  protected:
  explicit ResourceLogs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScopeLogsFieldNumber = 2,
    kSchemaUrlFieldNumber = 3,
    kResourceFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.logs.v1.ScopeLogs scope_logs = 2;
  int scope_logs_size() const;
  private:
  int _internal_scope_logs_size() const;
  public:
  void clear_scope_logs();
  ::opentelemetry::proto::logs::v1::ScopeLogs* mutable_scope_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::logs::v1::ScopeLogs >*
      mutable_scope_logs();
  private:
  const ::opentelemetry::proto::logs::v1::ScopeLogs& _internal_scope_logs(int index) const;
  ::opentelemetry::proto::logs::v1::ScopeLogs* _internal_add_scope_logs();
  public:
  const ::opentelemetry::proto::logs::v1::ScopeLogs& scope_logs(int index) const;
  ::opentelemetry::proto::logs::v1::ScopeLogs* add_scope_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::logs::v1::ScopeLogs >&
      scope_logs() const;

  // string schema_url = 3;
  void clear_schema_url();
  const std::string& schema_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_schema_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_schema_url();
  PROTOBUF_NODISCARD std::string* release_schema_url();
  void set_allocated_schema_url(std::string* schema_url);
  private:
  const std::string& _internal_schema_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema_url(const std::string& value);
  std::string* _internal_mutable_schema_url();
  public:

  // .opentelemetry.proto.resource.v1.Resource resource = 1;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::opentelemetry::proto::resource::v1::Resource& resource() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::resource::v1::Resource* release_resource();
  ::opentelemetry::proto::resource::v1::Resource* mutable_resource();
  void set_allocated_resource(::opentelemetry::proto::resource::v1::Resource* resource);
  private:
  const ::opentelemetry::proto::resource::v1::Resource& _internal_resource() const;
  ::opentelemetry::proto::resource::v1::Resource* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::opentelemetry::proto::resource::v1::Resource* resource);
  ::opentelemetry::proto::resource::v1::Resource* unsafe_arena_release_resource();

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.logs.v1.ResourceLogs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::logs::v1::ScopeLogs > scope_logs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_url_;
    ::opentelemetry::proto::resource::v1::Resource* resource_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto;
};
// -------------------------------------------------------------------

class ScopeLogs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.logs.v1.ScopeLogs) */ {
 public:
  inline ScopeLogs() : ScopeLogs(nullptr) {}
  ~ScopeLogs() override;
  explicit PROTOBUF_CONSTEXPR ScopeLogs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScopeLogs(const ScopeLogs& from);
  ScopeLogs(ScopeLogs&& from) noexcept
    : ScopeLogs() {
    *this = ::std::move(from);
  }

  inline ScopeLogs& operator=(const ScopeLogs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScopeLogs& operator=(ScopeLogs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScopeLogs& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScopeLogs* internal_default_instance() {
    return reinterpret_cast<const ScopeLogs*>(
               &_ScopeLogs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ScopeLogs& a, ScopeLogs& b) {
    a.Swap(&b);
  }
  inline void Swap(ScopeLogs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScopeLogs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScopeLogs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScopeLogs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScopeLogs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScopeLogs& from) {
    ScopeLogs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScopeLogs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.logs.v1.ScopeLogs";
  }
  protected:
  explicit ScopeLogs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogRecordsFieldNumber = 2,
    kSchemaUrlFieldNumber = 3,
    kScopeFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.logs.v1.LogRecord log_records = 2;
  int log_records_size() const;
  private:
  int _internal_log_records_size() const;
  public:
  void clear_log_records();
  ::opentelemetry::proto::logs::v1::LogRecord* mutable_log_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::logs::v1::LogRecord >*
      mutable_log_records();
  private:
  const ::opentelemetry::proto::logs::v1::LogRecord& _internal_log_records(int index) const;
  ::opentelemetry::proto::logs::v1::LogRecord* _internal_add_log_records();
  public:
  const ::opentelemetry::proto::logs::v1::LogRecord& log_records(int index) const;
  ::opentelemetry::proto::logs::v1::LogRecord* add_log_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::logs::v1::LogRecord >&
      log_records() const;

  // string schema_url = 3;
  void clear_schema_url();
  const std::string& schema_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_schema_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_schema_url();
  PROTOBUF_NODISCARD std::string* release_schema_url();
  void set_allocated_schema_url(std::string* schema_url);
  private:
  const std::string& _internal_schema_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema_url(const std::string& value);
  std::string* _internal_mutable_schema_url();
  public:

  // .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
  bool has_scope() const;
  private:
  bool _internal_has_scope() const;
  public:
  void clear_scope();
  const ::opentelemetry::proto::common::v1::InstrumentationScope& scope() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::common::v1::InstrumentationScope* release_scope();
  ::opentelemetry::proto::common::v1::InstrumentationScope* mutable_scope();
  void set_allocated_scope(::opentelemetry::proto::common::v1::InstrumentationScope* scope);
  private:
  const ::opentelemetry::proto::common::v1::InstrumentationScope& _internal_scope() const;
  ::opentelemetry::proto::common::v1::InstrumentationScope* _internal_mutable_scope();
  public:
  void unsafe_arena_set_allocated_scope(
      ::opentelemetry::proto::common::v1::InstrumentationScope* scope);
  ::opentelemetry::proto::common::v1::InstrumentationScope* unsafe_arena_release_scope();

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.logs.v1.ScopeLogs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::logs::v1::LogRecord > log_records_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_url_;
    ::opentelemetry::proto::common::v1::InstrumentationScope* scope_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto;
};
// -------------------------------------------------------------------

class LogRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.logs.v1.LogRecord) */ {
 public:
  inline LogRecord() : LogRecord(nullptr) {}
  ~LogRecord() override;
  explicit PROTOBUF_CONSTEXPR LogRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogRecord(const LogRecord& from);
  LogRecord(LogRecord&& from) noexcept
    : LogRecord() {
    *this = ::std::move(from);
  }

  inline LogRecord& operator=(const LogRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogRecord& operator=(LogRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogRecord* internal_default_instance() {
    return reinterpret_cast<const LogRecord*>(
               &_LogRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LogRecord& a, LogRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(LogRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogRecord& from) {
    LogRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.logs.v1.LogRecord";
  }
  protected:
  explicit LogRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 6,
    kSeverityTextFieldNumber = 3,
    kTraceIdFieldNumber = 9,
    kSpanIdFieldNumber = 10,
    kEventNameFieldNumber = 12,
    kBodyFieldNumber = 5,
    kTimeUnixNanoFieldNumber = 1,
    kSeverityNumberFieldNumber = 2,
    kDroppedAttributesCountFieldNumber = 7,
    kObservedTimeUnixNanoFieldNumber = 11,
    kFlagsFieldNumber = 8,
  };
  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 6;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  ::opentelemetry::proto::common::v1::KeyValue* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >*
      mutable_attributes();
  private:
  const ::opentelemetry::proto::common::v1::KeyValue& _internal_attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* _internal_add_attributes();
  public:
  const ::opentelemetry::proto::common::v1::KeyValue& attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >&
      attributes() const;

  // string severity_text = 3;
  void clear_severity_text();
  const std::string& severity_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_severity_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_severity_text();
  PROTOBUF_NODISCARD std::string* release_severity_text();
  void set_allocated_severity_text(std::string* severity_text);
  private:
  const std::string& _internal_severity_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_severity_text(const std::string& value);
  std::string* _internal_mutable_severity_text();
  public:

  // bytes trace_id = 9;
  void clear_trace_id();
  const std::string& trace_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trace_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trace_id();
  PROTOBUF_NODISCARD std::string* release_trace_id();
  void set_allocated_trace_id(std::string* trace_id);
  private:
  const std::string& _internal_trace_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trace_id(const std::string& value);
  std::string* _internal_mutable_trace_id();
  public:

  // bytes span_id = 10;
  void clear_span_id();
  const std::string& span_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_span_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_span_id();
  PROTOBUF_NODISCARD std::string* release_span_id();
  void set_allocated_span_id(std::string* span_id);
  private:
  const std::string& _internal_span_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_span_id(const std::string& value);
  std::string* _internal_mutable_span_id();
  public:

  // string event_name = 12;
  void clear_event_name();
  const std::string& event_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event_name();
  PROTOBUF_NODISCARD std::string* release_event_name();
  void set_allocated_event_name(std::string* event_name);
  private:
  const std::string& _internal_event_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_name(const std::string& value);
  std::string* _internal_mutable_event_name();
  public:

  // .opentelemetry.proto.common.v1.AnyValue body = 5;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::opentelemetry::proto::common::v1::AnyValue& body() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::common::v1::AnyValue* release_body();
  ::opentelemetry::proto::common::v1::AnyValue* mutable_body();
  void set_allocated_body(::opentelemetry::proto::common::v1::AnyValue* body);
  private:
  const ::opentelemetry::proto::common::v1::AnyValue& _internal_body() const;
  ::opentelemetry::proto::common::v1::AnyValue* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::opentelemetry::proto::common::v1::AnyValue* body);
  ::opentelemetry::proto::common::v1::AnyValue* unsafe_arena_release_body();

  // fixed64 time_unix_nano = 1;
  void clear_time_unix_nano();
  uint64_t time_unix_nano() const;
  void set_time_unix_nano(uint64_t value);
  private:
  uint64_t _internal_time_unix_nano() const;
  void _internal_set_time_unix_nano(uint64_t value);
  public:

  // .opentelemetry.proto.logs.v1.SeverityNumber severity_number = 2;
  void clear_severity_number();
  ::opentelemetry::proto::logs::v1::SeverityNumber severity_number() const;
  void set_severity_number(::opentelemetry::proto::logs::v1::SeverityNumber value);
  private:
  ::opentelemetry::proto::logs::v1::SeverityNumber _internal_severity_number() const;
  void _internal_set_severity_number(::opentelemetry::proto::logs::v1::SeverityNumber value);
  public:

  // uint32 dropped_attributes_count = 7;
  void clear_dropped_attributes_count();
  uint32_t dropped_attributes_count() const;
  void set_dropped_attributes_count(uint32_t value);
  private:
  uint32_t _internal_dropped_attributes_count() const;
  void _internal_set_dropped_attributes_count(uint32_t value);
  public:

  // fixed64 observed_time_unix_nano = 11;
  void clear_observed_time_unix_nano();
  uint64_t observed_time_unix_nano() const;
  void set_observed_time_unix_nano(uint64_t value);
  private:
  uint64_t _internal_observed_time_unix_nano() const;
  void _internal_set_observed_time_unix_nano(uint64_t value);
  public:

  // fixed32 flags = 8;
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.logs.v1.LogRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue > attributes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr severity_text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr span_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_name_;
    ::opentelemetry::proto::common::v1::AnyValue* body_;
    uint64_t time_unix_nano_;
    int severity_number_;
    uint32_t dropped_attributes_count_;
    uint64_t observed_time_unix_nano_;
    uint32_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogsData

// repeated .opentelemetry.proto.logs.v1.ResourceLogs resource_logs = 1;
inline int LogsData::_internal_resource_logs_size() const {
  return _impl_.resource_logs_.size();
}
inline int LogsData::resource_logs_size() const {
  return _internal_resource_logs_size();
}
inline void LogsData::clear_resource_logs() {
  _impl_.resource_logs_.Clear();
}
inline ::opentelemetry::proto::logs::v1::ResourceLogs* LogsData::mutable_resource_logs(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.logs.v1.LogsData.resource_logs)
  return _impl_.resource_logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::logs::v1::ResourceLogs >*
LogsData::mutable_resource_logs() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.logs.v1.LogsData.resource_logs)
  return &_impl_.resource_logs_;
}
inline const ::opentelemetry::proto::logs::v1::ResourceLogs& LogsData::_internal_resource_logs(int index) const {
  return _impl_.resource_logs_.Get(index);
}
inline const ::opentelemetry::proto::logs::v1::ResourceLogs& LogsData::resource_logs(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.LogsData.resource_logs)
  return _internal_resource_logs(index);
}
inline ::opentelemetry::proto::logs::v1::ResourceLogs* LogsData::_internal_add_resource_logs() {
  return _impl_.resource_logs_.Add();
}
inline ::opentelemetry::proto::logs::v1::ResourceLogs* LogsData::add_resource_logs() {
  ::opentelemetry::proto::logs::v1::ResourceLogs* _add = _internal_add_resource_logs();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.logs.v1.LogsData.resource_logs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::logs::v1::ResourceLogs >&
LogsData::resource_logs() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.logs.v1.LogsData.resource_logs)
  return _impl_.resource_logs_;
}

// -------------------------------------------------------------------

// ResourceLogs

// .opentelemetry.proto.resource.v1.Resource resource = 1;
inline bool ResourceLogs::_internal_has_resource() const {
  return this != internal_default_instance() && _impl_.resource_ != nullptr;
}
inline bool ResourceLogs::has_resource() const {
  return _internal_has_resource();
}
inline const ::opentelemetry::proto::resource::v1::Resource& ResourceLogs::_internal_resource() const {
  const ::opentelemetry::proto::resource::v1::Resource* p = _impl_.resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentelemetry::proto::resource::v1::Resource&>(
      ::opentelemetry::proto::resource::v1::_Resource_default_instance_);
}
inline const ::opentelemetry::proto::resource::v1::Resource& ResourceLogs::resource() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.ResourceLogs.resource)
  return _internal_resource();
}
inline void ResourceLogs::unsafe_arena_set_allocated_resource(
    ::opentelemetry::proto::resource::v1::Resource* resource) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resource_);
  }
  _impl_.resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.logs.v1.ResourceLogs.resource)
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceLogs::release_resource() {
  
  ::opentelemetry::proto::resource::v1::Resource* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceLogs::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.logs.v1.ResourceLogs.resource)
  
  ::opentelemetry::proto::resource::v1::Resource* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceLogs::_internal_mutable_resource() {
  
  if (_impl_.resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::opentelemetry::proto::resource::v1::Resource>(GetArenaForAllocation());
    _impl_.resource_ = p;
  }
  return _impl_.resource_;
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceLogs::mutable_resource() {
  ::opentelemetry::proto::resource::v1::Resource* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.logs.v1.ResourceLogs.resource)
  return _msg;
}
inline void ResourceLogs::set_allocated_resource(::opentelemetry::proto::resource::v1::Resource* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resource_);
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource));
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.logs.v1.ResourceLogs.resource)
}

// repeated .opentelemetry.proto.logs.v1.ScopeLogs scope_logs = 2;
inline int ResourceLogs::_internal_scope_logs_size() const {
  return _impl_.scope_logs_.size();
}
inline int ResourceLogs::scope_logs_size() const {
  return _internal_scope_logs_size();
}
inline void ResourceLogs::clear_scope_logs() {
  _impl_.scope_logs_.Clear();
}
inline ::opentelemetry::proto::logs::v1::ScopeLogs* ResourceLogs::mutable_scope_logs(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.logs.v1.ResourceLogs.scope_logs)
  return _impl_.scope_logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::logs::v1::ScopeLogs >*
ResourceLogs::mutable_scope_logs() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.logs.v1.ResourceLogs.scope_logs)
  return &_impl_.scope_logs_;
}
inline const ::opentelemetry::proto::logs::v1::ScopeLogs& ResourceLogs::_internal_scope_logs(int index) const {
  return _impl_.scope_logs_.Get(index);
}
inline const ::opentelemetry::proto::logs::v1::ScopeLogs& ResourceLogs::scope_logs(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.ResourceLogs.scope_logs)
  return _internal_scope_logs(index);
}
inline ::opentelemetry::proto::logs::v1::ScopeLogs* ResourceLogs::_internal_add_scope_logs() {
  return _impl_.scope_logs_.Add();
}
inline ::opentelemetry::proto::logs::v1::ScopeLogs* ResourceLogs::add_scope_logs() {
  ::opentelemetry::proto::logs::v1::ScopeLogs* _add = _internal_add_scope_logs();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.logs.v1.ResourceLogs.scope_logs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::logs::v1::ScopeLogs >&
ResourceLogs::scope_logs() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.logs.v1.ResourceLogs.scope_logs)
  return _impl_.scope_logs_;
}

// string schema_url = 3;
inline void ResourceLogs::clear_schema_url() {
  _impl_.schema_url_.ClearToEmpty();
}
inline const std::string& ResourceLogs::schema_url() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.ResourceLogs.schema_url)
  return _internal_schema_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceLogs::set_schema_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.schema_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.logs.v1.ResourceLogs.schema_url)
}
inline std::string* ResourceLogs::mutable_schema_url() {
  std::string* _s = _internal_mutable_schema_url();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.logs.v1.ResourceLogs.schema_url)
  return _s;
}
inline const std::string& ResourceLogs::_internal_schema_url() const {
  return _impl_.schema_url_.Get();
}
inline void ResourceLogs::_internal_set_schema_url(const std::string& value) {
  
  _impl_.schema_url_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceLogs::_internal_mutable_schema_url() {
  
  return _impl_.schema_url_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceLogs::release_schema_url() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.logs.v1.ResourceLogs.schema_url)
  return _impl_.schema_url_.Release();
}
inline void ResourceLogs::set_allocated_schema_url(std::string* schema_url) {
  if (schema_url != nullptr) {
    
  } else {
    
  }
  _impl_.schema_url_.SetAllocated(schema_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.schema_url_.IsDefault()) {
    _impl_.schema_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.logs.v1.ResourceLogs.schema_url)
}

// -------------------------------------------------------------------

// ScopeLogs

// .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
inline bool ScopeLogs::_internal_has_scope() const {
  return this != internal_default_instance() && _impl_.scope_ != nullptr;
}
inline bool ScopeLogs::has_scope() const {
  return _internal_has_scope();
}
inline const ::opentelemetry::proto::common::v1::InstrumentationScope& ScopeLogs::_internal_scope() const {
  const ::opentelemetry::proto::common::v1::InstrumentationScope* p = _impl_.scope_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentelemetry::proto::common::v1::InstrumentationScope&>(
      ::opentelemetry::proto::common::v1::_InstrumentationScope_default_instance_);
}
inline const ::opentelemetry::proto::common::v1::InstrumentationScope& ScopeLogs::scope() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.ScopeLogs.scope)
  return _internal_scope();
}
inline void ScopeLogs::unsafe_arena_set_allocated_scope(
    ::opentelemetry::proto::common::v1::InstrumentationScope* scope) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scope_);
  }
  _impl_.scope_ = scope;
  if (scope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.logs.v1.ScopeLogs.scope)
}
inline ::opentelemetry::proto::common::v1::InstrumentationScope* ScopeLogs::release_scope() {
  
  ::opentelemetry::proto::common::v1::InstrumentationScope* temp = _impl_.scope_;
  _impl_.scope_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opentelemetry::proto::common::v1::InstrumentationScope* ScopeLogs::unsafe_arena_release_scope() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.logs.v1.ScopeLogs.scope)
  
  ::opentelemetry::proto::common::v1::InstrumentationScope* temp = _impl_.scope_;
  _impl_.scope_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::common::v1::InstrumentationScope* ScopeLogs::_internal_mutable_scope() {
  
  if (_impl_.scope_ == nullptr) {
    auto* p = CreateMaybeMessage<::opentelemetry::proto::common::v1::InstrumentationScope>(GetArenaForAllocation());
    _impl_.scope_ = p;
  }
  return _impl_.scope_;
}
inline ::opentelemetry::proto::common::v1::InstrumentationScope* ScopeLogs::mutable_scope() {
  ::opentelemetry::proto::common::v1::InstrumentationScope* _msg = _internal_mutable_scope();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.logs.v1.ScopeLogs.scope)
  return _msg;
}
inline void ScopeLogs::set_allocated_scope(::opentelemetry::proto::common::v1::InstrumentationScope* scope) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scope_);
  }
  if (scope) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scope));
    if (message_arena != submessage_arena) {
      scope = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scope, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scope_ = scope;
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.logs.v1.ScopeLogs.scope)
}

// repeated .opentelemetry.proto.logs.v1.LogRecord log_records = 2;
inline int ScopeLogs::_internal_log_records_size() const {
  return _impl_.log_records_.size();
}
inline int ScopeLogs::log_records_size() const {
  return _internal_log_records_size();
}
inline void ScopeLogs::clear_log_records() {
  _impl_.log_records_.Clear();
}
inline ::opentelemetry::proto::logs::v1::LogRecord* ScopeLogs::mutable_log_records(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.logs.v1.ScopeLogs.log_records)
  return _impl_.log_records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::logs::v1::LogRecord >*
ScopeLogs::mutable_log_records() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.logs.v1.ScopeLogs.log_records)
  return &_impl_.log_records_;
}
inline const ::opentelemetry::proto::logs::v1::LogRecord& ScopeLogs::_internal_log_records(int index) const {
  return _impl_.log_records_.Get(index);
}
inline const ::opentelemetry::proto::logs::v1::LogRecord& ScopeLogs::log_records(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.ScopeLogs.log_records)
  return _internal_log_records(index);
}
inline ::opentelemetry::proto::logs::v1::LogRecord* ScopeLogs::_internal_add_log_records() {
  return _impl_.log_records_.Add();
}
inline ::opentelemetry::proto::logs::v1::LogRecord* ScopeLogs::add_log_records() {
  ::opentelemetry::proto::logs::v1::LogRecord* _add = _internal_add_log_records();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.logs.v1.ScopeLogs.log_records)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::logs::v1::LogRecord >&
ScopeLogs::log_records() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.logs.v1.ScopeLogs.log_records)
  return _impl_.log_records_;
}

// string schema_url = 3;
inline void ScopeLogs::clear_schema_url() {
  _impl_.schema_url_.ClearToEmpty();
}
inline const std::string& ScopeLogs::schema_url() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.ScopeLogs.schema_url)
  return _internal_schema_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ScopeLogs::set_schema_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.schema_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.logs.v1.ScopeLogs.schema_url)
}
inline std::string* ScopeLogs::mutable_schema_url() {
  std::string* _s = _internal_mutable_schema_url();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.logs.v1.ScopeLogs.schema_url)
  return _s;
}
inline const std::string& ScopeLogs::_internal_schema_url() const {
  return _impl_.schema_url_.Get();
}
inline void ScopeLogs::_internal_set_schema_url(const std::string& value) {
  
  _impl_.schema_url_.Set(value, GetArenaForAllocation());
}
inline std::string* ScopeLogs::_internal_mutable_schema_url() {
  
  return _impl_.schema_url_.Mutable(GetArenaForAllocation());
}
inline std::string* ScopeLogs::release_schema_url() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.logs.v1.ScopeLogs.schema_url)
  return _impl_.schema_url_.Release();
}
inline void ScopeLogs::set_allocated_schema_url(std::string* schema_url) {
  if (schema_url != nullptr) {
    
  } else {
    
  }
  _impl_.schema_url_.SetAllocated(schema_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.schema_url_.IsDefault()) {
    _impl_.schema_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.logs.v1.ScopeLogs.schema_url)
}

// -------------------------------------------------------------------

// LogRecord

// fixed64 time_unix_nano = 1;
inline void LogRecord::clear_time_unix_nano() {
  _impl_.time_unix_nano_ = uint64_t{0u};
}
inline uint64_t LogRecord::_internal_time_unix_nano() const {
  return _impl_.time_unix_nano_;
}
inline uint64_t LogRecord::time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.LogRecord.time_unix_nano)
  return _internal_time_unix_nano();
}
inline void LogRecord::_internal_set_time_unix_nano(uint64_t value) {
  
  _impl_.time_unix_nano_ = value;
}
inline void LogRecord::set_time_unix_nano(uint64_t value) {
  _internal_set_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.logs.v1.LogRecord.time_unix_nano)
}

// fixed64 observed_time_unix_nano = 11;
inline void LogRecord::clear_observed_time_unix_nano() {
  _impl_.observed_time_unix_nano_ = uint64_t{0u};
}
inline uint64_t LogRecord::_internal_observed_time_unix_nano() const {
  return _impl_.observed_time_unix_nano_;
}
inline uint64_t LogRecord::observed_time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.LogRecord.observed_time_unix_nano)
  return _internal_observed_time_unix_nano();
}
inline void LogRecord::_internal_set_observed_time_unix_nano(uint64_t value) {
  
  _impl_.observed_time_unix_nano_ = value;
}
inline void LogRecord::set_observed_time_unix_nano(uint64_t value) {
  _internal_set_observed_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.logs.v1.LogRecord.observed_time_unix_nano)
}

// .opentelemetry.proto.logs.v1.SeverityNumber severity_number = 2;
inline void LogRecord::clear_severity_number() {
  _impl_.severity_number_ = 0;
}
inline ::opentelemetry::proto::logs::v1::SeverityNumber LogRecord::_internal_severity_number() const {
  return static_cast< ::opentelemetry::proto::logs::v1::SeverityNumber >(_impl_.severity_number_);
}
inline ::opentelemetry::proto::logs::v1::SeverityNumber LogRecord::severity_number() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.LogRecord.severity_number)
  return _internal_severity_number();
}
inline void LogRecord::_internal_set_severity_number(::opentelemetry::proto::logs::v1::SeverityNumber value) {
  
  _impl_.severity_number_ = value;
}
inline void LogRecord::set_severity_number(::opentelemetry::proto::logs::v1::SeverityNumber value) {
  _internal_set_severity_number(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.logs.v1.LogRecord.severity_number)
}

// string severity_text = 3;
inline void LogRecord::clear_severity_text() {
  _impl_.severity_text_.ClearToEmpty();
}
inline const std::string& LogRecord::severity_text() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.LogRecord.severity_text)
  return _internal_severity_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogRecord::set_severity_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.severity_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.logs.v1.LogRecord.severity_text)
}
inline std::string* LogRecord::mutable_severity_text() {
  std::string* _s = _internal_mutable_severity_text();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.logs.v1.LogRecord.severity_text)
  return _s;
}
inline const std::string& LogRecord::_internal_severity_text() const {
  return _impl_.severity_text_.Get();
}
inline void LogRecord::_internal_set_severity_text(const std::string& value) {
  
  _impl_.severity_text_.Set(value, GetArenaForAllocation());
}
inline std::string* LogRecord::_internal_mutable_severity_text() {
  
  return _impl_.severity_text_.Mutable(GetArenaForAllocation());
}
inline std::string* LogRecord::release_severity_text() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.logs.v1.LogRecord.severity_text)
  return _impl_.severity_text_.Release();
}
inline void LogRecord::set_allocated_severity_text(std::string* severity_text) {
  if (severity_text != nullptr) {
    
  } else {
    
  }
  _impl_.severity_text_.SetAllocated(severity_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.severity_text_.IsDefault()) {
    _impl_.severity_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.logs.v1.LogRecord.severity_text)
}

// .opentelemetry.proto.common.v1.AnyValue body = 5;
inline bool LogRecord::_internal_has_body() const {
  return this != internal_default_instance() && _impl_.body_ != nullptr;
}
inline bool LogRecord::has_body() const {
  return _internal_has_body();
}
inline const ::opentelemetry::proto::common::v1::AnyValue& LogRecord::_internal_body() const {
  const ::opentelemetry::proto::common::v1::AnyValue* p = _impl_.body_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentelemetry::proto::common::v1::AnyValue&>(
      ::opentelemetry::proto::common::v1::_AnyValue_default_instance_);
}
inline const ::opentelemetry::proto::common::v1::AnyValue& LogRecord::body() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.LogRecord.body)
  return _internal_body();
}
inline void LogRecord::unsafe_arena_set_allocated_body(
    ::opentelemetry::proto::common::v1::AnyValue* body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_);
  }
  _impl_.body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.logs.v1.LogRecord.body)
}
inline ::opentelemetry::proto::common::v1::AnyValue* LogRecord::release_body() {
  
  ::opentelemetry::proto::common::v1::AnyValue* temp = _impl_.body_;
  _impl_.body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opentelemetry::proto::common::v1::AnyValue* LogRecord::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.logs.v1.LogRecord.body)
  
  ::opentelemetry::proto::common::v1::AnyValue* temp = _impl_.body_;
  _impl_.body_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::common::v1::AnyValue* LogRecord::_internal_mutable_body() {
  
  if (_impl_.body_ == nullptr) {
    auto* p = CreateMaybeMessage<::opentelemetry::proto::common::v1::AnyValue>(GetArenaForAllocation());
    _impl_.body_ = p;
  }
  return _impl_.body_;
}
inline ::opentelemetry::proto::common::v1::AnyValue* LogRecord::mutable_body() {
  ::opentelemetry::proto::common::v1::AnyValue* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.logs.v1.LogRecord.body)
  return _msg;
}
inline void LogRecord::set_allocated_body(::opentelemetry::proto::common::v1::AnyValue* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_);
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body));
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.body_ = body;
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.logs.v1.LogRecord.body)
}

// repeated .opentelemetry.proto.common.v1.KeyValue attributes = 6;
inline int LogRecord::_internal_attributes_size() const {
  return _impl_.attributes_.size();
}
inline int LogRecord::attributes_size() const {
  return _internal_attributes_size();
}
inline ::opentelemetry::proto::common::v1::KeyValue* LogRecord::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.logs.v1.LogRecord.attributes)
  return _impl_.attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >*
LogRecord::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.logs.v1.LogRecord.attributes)
  return &_impl_.attributes_;
}
inline const ::opentelemetry::proto::common::v1::KeyValue& LogRecord::_internal_attributes(int index) const {
  return _impl_.attributes_.Get(index);
}
inline const ::opentelemetry::proto::common::v1::KeyValue& LogRecord::attributes(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.LogRecord.attributes)
  return _internal_attributes(index);
}
inline ::opentelemetry::proto::common::v1::KeyValue* LogRecord::_internal_add_attributes() {
  return _impl_.attributes_.Add();
}
inline ::opentelemetry::proto::common::v1::KeyValue* LogRecord::add_attributes() {
  ::opentelemetry::proto::common::v1::KeyValue* _add = _internal_add_attributes();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.logs.v1.LogRecord.attributes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >&
LogRecord::attributes() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.logs.v1.LogRecord.attributes)
  return _impl_.attributes_;
}

// uint32 dropped_attributes_count = 7;
inline void LogRecord::clear_dropped_attributes_count() {
  _impl_.dropped_attributes_count_ = 0u;
}
inline uint32_t LogRecord::_internal_dropped_attributes_count() const {
  return _impl_.dropped_attributes_count_;
}
inline uint32_t LogRecord::dropped_attributes_count() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.LogRecord.dropped_attributes_count)
  return _internal_dropped_attributes_count();
}
inline void LogRecord::_internal_set_dropped_attributes_count(uint32_t value) {
  
  _impl_.dropped_attributes_count_ = value;
}
inline void LogRecord::set_dropped_attributes_count(uint32_t value) {
  _internal_set_dropped_attributes_count(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.logs.v1.LogRecord.dropped_attributes_count)
}

// fixed32 flags = 8;
inline void LogRecord::clear_flags() {
  _impl_.flags_ = 0u;
}
inline uint32_t LogRecord::_internal_flags() const {
  return _impl_.flags_;
}
inline uint32_t LogRecord::flags() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.LogRecord.flags)
  return _internal_flags();
}
inline void LogRecord::_internal_set_flags(uint32_t value) {
  
  _impl_.flags_ = value;
}
inline void LogRecord::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.logs.v1.LogRecord.flags)
}

// bytes trace_id = 9;
inline void LogRecord::clear_trace_id() {
  _impl_.trace_id_.ClearToEmpty();
}
inline const std::string& LogRecord::trace_id() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.LogRecord.trace_id)
  return _internal_trace_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogRecord::set_trace_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.trace_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.logs.v1.LogRecord.trace_id)
}
inline std::string* LogRecord::mutable_trace_id() {
  std::string* _s = _internal_mutable_trace_id();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.logs.v1.LogRecord.trace_id)
  return _s;
}
inline const std::string& LogRecord::_internal_trace_id() const {
  return _impl_.trace_id_.Get();
}
inline void LogRecord::_internal_set_trace_id(const std::string& value) {
  
  _impl_.trace_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LogRecord::_internal_mutable_trace_id() {
  
  return _impl_.trace_id_.Mutable(GetArenaForAllocation());
}
inline std::string* LogRecord::release_trace_id() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.logs.v1.LogRecord.trace_id)
  return _impl_.trace_id_.Release();
}
inline void LogRecord::set_allocated_trace_id(std::string* trace_id) {
  if (trace_id != nullptr) {
    
  } else {
    
  }
  _impl_.trace_id_.SetAllocated(trace_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trace_id_.IsDefault()) {
    _impl_.trace_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.logs.v1.LogRecord.trace_id)
}

// bytes span_id = 10;
inline void LogRecord::clear_span_id() {
  _impl_.span_id_.ClearToEmpty();
}
inline const std::string& LogRecord::span_id() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.LogRecord.span_id)
  return _internal_span_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogRecord::set_span_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.span_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.logs.v1.LogRecord.span_id)
}
inline std::string* LogRecord::mutable_span_id() {
  std::string* _s = _internal_mutable_span_id();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.logs.v1.LogRecord.span_id)
  return _s;
}
inline const std::string& LogRecord::_internal_span_id() const {
  return _impl_.span_id_.Get();
}
inline void LogRecord::_internal_set_span_id(const std::string& value) {
  
  _impl_.span_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LogRecord::_internal_mutable_span_id() {
  
  return _impl_.span_id_.Mutable(GetArenaForAllocation());
}
inline std::string* LogRecord::release_span_id() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.logs.v1.LogRecord.span_id)
  return _impl_.span_id_.Release();
}
inline void LogRecord::set_allocated_span_id(std::string* span_id) {
  if (span_id != nullptr) {
    
  } else {
    
  }
  _impl_.span_id_.SetAllocated(span_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.span_id_.IsDefault()) {
    _impl_.span_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.logs.v1.LogRecord.span_id)
}

// string event_name = 12;
inline void LogRecord::clear_event_name() {
  _impl_.event_name_.ClearToEmpty();
}
inline const std::string& LogRecord::event_name() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.LogRecord.event_name)
  return _internal_event_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogRecord::set_event_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.event_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.logs.v1.LogRecord.event_name)
}
inline std::string* LogRecord::mutable_event_name() {
  std::string* _s = _internal_mutable_event_name();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.logs.v1.LogRecord.event_name)
  return _s;
}
inline const std::string& LogRecord::_internal_event_name() const {
  return _impl_.event_name_.Get();
}
inline void LogRecord::_internal_set_event_name(const std::string& value) {
  
  _impl_.event_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LogRecord::_internal_mutable_event_name() {
  
  return _impl_.event_name_.Mutable(GetArenaForAllocation());
}
inline std::string* LogRecord::release_event_name() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.logs.v1.LogRecord.event_name)
  return _impl_.event_name_.Release();
}
inline void LogRecord::set_allocated_event_name(std::string* event_name) {
  if (event_name != nullptr) {
    
  } else {
    
  }
  _impl_.event_name_.SetAllocated(event_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.event_name_.IsDefault()) {
    _impl_.event_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.logs.v1.LogRecord.event_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace logs
}  // namespace proto
}  // namespace opentelemetry

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::opentelemetry::proto::logs::v1::SeverityNumber> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opentelemetry::proto::logs::v1::SeverityNumber>() {
  return ::opentelemetry::proto::logs::v1::SeverityNumber_descriptor();
}
template <> struct is_proto_enum< ::opentelemetry::proto::logs::v1::LogRecordFlags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opentelemetry::proto::logs::v1::LogRecordFlags>() {
  return ::opentelemetry::proto::logs::v1::LogRecordFlags_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto
