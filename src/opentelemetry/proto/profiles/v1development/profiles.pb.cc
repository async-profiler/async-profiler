// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/profiles/v1development/profiles.proto

#include "profiles.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace opentelemetry {
namespace proto {
namespace profiles {
namespace v1development {
PROTOBUF_CONSTEXPR ProfilesData::ProfilesData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.resource_profiles_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProfilesDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProfilesDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProfilesDataDefaultTypeInternal() {}
  union {
    ProfilesData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProfilesDataDefaultTypeInternal _ProfilesData_default_instance_;
PROTOBUF_CONSTEXPR ResourceProfiles::ResourceProfiles(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scope_profiles_)*/{}
  , /*decltype(_impl_.schema_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resource_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResourceProfilesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceProfilesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceProfilesDefaultTypeInternal() {}
  union {
    ResourceProfiles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceProfilesDefaultTypeInternal _ResourceProfiles_default_instance_;
PROTOBUF_CONSTEXPR ScopeProfiles::ScopeProfiles(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.profiles_)*/{}
  , /*decltype(_impl_.schema_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.scope_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScopeProfilesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScopeProfilesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScopeProfilesDefaultTypeInternal() {}
  union {
    ScopeProfiles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScopeProfilesDefaultTypeInternal _ScopeProfiles_default_instance_;
PROTOBUF_CONSTEXPR Profile::Profile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sample_type_)*/{}
  , /*decltype(_impl_.sample_)*/{}
  , /*decltype(_impl_.mapping_table_)*/{}
  , /*decltype(_impl_.location_table_)*/{}
  , /*decltype(_impl_.location_indices_)*/{}
  , /*decltype(_impl_._location_indices_cached_byte_size_)*/{0}
  , /*decltype(_impl_.function_table_)*/{}
  , /*decltype(_impl_.attribute_table_)*/{}
  , /*decltype(_impl_.attribute_units_)*/{}
  , /*decltype(_impl_.link_table_)*/{}
  , /*decltype(_impl_.string_table_)*/{}
  , /*decltype(_impl_.comment_strindices_)*/{}
  , /*decltype(_impl_._comment_strindices_cached_byte_size_)*/{0}
  , /*decltype(_impl_.attribute_indices_)*/{}
  , /*decltype(_impl_._attribute_indices_cached_byte_size_)*/{0}
  , /*decltype(_impl_.profile_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.original_payload_format_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.original_payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.period_type_)*/nullptr
  , /*decltype(_impl_.time_nanos_)*/int64_t{0}
  , /*decltype(_impl_.duration_nanos_)*/int64_t{0}
  , /*decltype(_impl_.period_)*/int64_t{0}
  , /*decltype(_impl_.default_sample_type_index_)*/0
  , /*decltype(_impl_.dropped_attributes_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProfileDefaultTypeInternal() {}
  union {
    Profile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProfileDefaultTypeInternal _Profile_default_instance_;
PROTOBUF_CONSTEXPR AttributeUnit::AttributeUnit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attribute_key_strindex_)*/0
  , /*decltype(_impl_.unit_strindex_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AttributeUnitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributeUnitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributeUnitDefaultTypeInternal() {}
  union {
    AttributeUnit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeUnitDefaultTypeInternal _AttributeUnit_default_instance_;
PROTOBUF_CONSTEXPR Link::Link(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trace_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.span_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LinkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LinkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LinkDefaultTypeInternal() {}
  union {
    Link _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LinkDefaultTypeInternal _Link_default_instance_;
PROTOBUF_CONSTEXPR ValueType::ValueType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_strindex_)*/0
  , /*decltype(_impl_.unit_strindex_)*/0
  , /*decltype(_impl_.aggregation_temporality_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValueTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValueTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValueTypeDefaultTypeInternal() {}
  union {
    ValueType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValueTypeDefaultTypeInternal _ValueType_default_instance_;
PROTOBUF_CONSTEXPR Sample::Sample(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._value_cached_byte_size_)*/{0}
  , /*decltype(_impl_.attribute_indices_)*/{}
  , /*decltype(_impl_._attribute_indices_cached_byte_size_)*/{0}
  , /*decltype(_impl_.timestamps_unix_nano_)*/{}
  , /*decltype(_impl_._timestamps_unix_nano_cached_byte_size_)*/{0}
  , /*decltype(_impl_.locations_start_index_)*/0
  , /*decltype(_impl_.locations_length_)*/0
  , /*decltype(_impl_.link_index_)*/0} {}
struct SampleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SampleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SampleDefaultTypeInternal() {}
  union {
    Sample _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SampleDefaultTypeInternal _Sample_default_instance_;
PROTOBUF_CONSTEXPR Mapping::Mapping(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attribute_indices_)*/{}
  , /*decltype(_impl_._attribute_indices_cached_byte_size_)*/{0}
  , /*decltype(_impl_.memory_start_)*/uint64_t{0u}
  , /*decltype(_impl_.memory_limit_)*/uint64_t{0u}
  , /*decltype(_impl_.file_offset_)*/uint64_t{0u}
  , /*decltype(_impl_.filename_strindex_)*/0
  , /*decltype(_impl_.has_functions_)*/false
  , /*decltype(_impl_.has_filenames_)*/false
  , /*decltype(_impl_.has_line_numbers_)*/false
  , /*decltype(_impl_.has_inline_frames_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MappingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MappingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MappingDefaultTypeInternal() {}
  union {
    Mapping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MappingDefaultTypeInternal _Mapping_default_instance_;
PROTOBUF_CONSTEXPR Location::Location(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.line_)*/{}
  , /*decltype(_impl_.attribute_indices_)*/{}
  , /*decltype(_impl_._attribute_indices_cached_byte_size_)*/{0}
  , /*decltype(_impl_.address_)*/uint64_t{0u}
  , /*decltype(_impl_.mapping_index_)*/0
  , /*decltype(_impl_.is_folded_)*/false} {}
struct LocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocationDefaultTypeInternal() {}
  union {
    Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocationDefaultTypeInternal _Location_default_instance_;
PROTOBUF_CONSTEXPR Line::Line(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.line_)*/int64_t{0}
  , /*decltype(_impl_.column_)*/int64_t{0}
  , /*decltype(_impl_.function_index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LineDefaultTypeInternal() {}
  union {
    Line _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LineDefaultTypeInternal _Line_default_instance_;
PROTOBUF_CONSTEXPR Function::Function(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_strindex_)*/0
  , /*decltype(_impl_.system_name_strindex_)*/0
  , /*decltype(_impl_.start_line_)*/int64_t{0}
  , /*decltype(_impl_.filename_strindex_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FunctionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FunctionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FunctionDefaultTypeInternal() {}
  union {
    Function _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FunctionDefaultTypeInternal _Function_default_instance_;
}  // namespace v1development
}  // namespace profiles
}  // namespace proto
}  // namespace opentelemetry
static ::_pb::Metadata file_level_metadata_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto[12];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto = nullptr;

const uint32_t TableStruct_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::ProfilesData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::ProfilesData, _impl_.resource_profiles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::ResourceProfiles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::ResourceProfiles, _impl_.resource_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::ResourceProfiles, _impl_.scope_profiles_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::ResourceProfiles, _impl_.schema_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::ScopeProfiles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::ScopeProfiles, _impl_.scope_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::ScopeProfiles, _impl_.profiles_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::ScopeProfiles, _impl_.schema_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Profile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Profile, _impl_.sample_type_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Profile, _impl_.sample_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Profile, _impl_.mapping_table_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Profile, _impl_.location_table_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Profile, _impl_.location_indices_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Profile, _impl_.function_table_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Profile, _impl_.attribute_table_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Profile, _impl_.attribute_units_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Profile, _impl_.link_table_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Profile, _impl_.string_table_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Profile, _impl_.time_nanos_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Profile, _impl_.duration_nanos_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Profile, _impl_.period_type_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Profile, _impl_.period_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Profile, _impl_.comment_strindices_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Profile, _impl_.default_sample_type_index_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Profile, _impl_.profile_id_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Profile, _impl_.dropped_attributes_count_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Profile, _impl_.original_payload_format_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Profile, _impl_.original_payload_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Profile, _impl_.attribute_indices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::AttributeUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::AttributeUnit, _impl_.attribute_key_strindex_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::AttributeUnit, _impl_.unit_strindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Link, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Link, _impl_.trace_id_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Link, _impl_.span_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::ValueType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::ValueType, _impl_.type_strindex_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::ValueType, _impl_.unit_strindex_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::ValueType, _impl_.aggregation_temporality_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Sample, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Sample, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Sample, _impl_.locations_start_index_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Sample, _impl_.locations_length_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Sample, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Sample, _impl_.attribute_indices_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Sample, _impl_.link_index_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Sample, _impl_.timestamps_unix_nano_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Mapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Mapping, _impl_.memory_start_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Mapping, _impl_.memory_limit_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Mapping, _impl_.file_offset_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Mapping, _impl_.filename_strindex_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Mapping, _impl_.attribute_indices_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Mapping, _impl_.has_functions_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Mapping, _impl_.has_filenames_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Mapping, _impl_.has_line_numbers_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Mapping, _impl_.has_inline_frames_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Location, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Location, _impl_.mapping_index_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Location, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Location, _impl_.line_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Location, _impl_.is_folded_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Location, _impl_.attribute_indices_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Line, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Line, _impl_.function_index_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Line, _impl_.line_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Line, _impl_.column_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Function, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Function, _impl_.name_strindex_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Function, _impl_.system_name_strindex_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Function, _impl_.filename_strindex_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::profiles::v1development::Function, _impl_.start_line_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opentelemetry::proto::profiles::v1development::ProfilesData)},
  { 7, -1, -1, sizeof(::opentelemetry::proto::profiles::v1development::ResourceProfiles)},
  { 16, -1, -1, sizeof(::opentelemetry::proto::profiles::v1development::ScopeProfiles)},
  { 25, -1, -1, sizeof(::opentelemetry::proto::profiles::v1development::Profile)},
  { 52, -1, -1, sizeof(::opentelemetry::proto::profiles::v1development::AttributeUnit)},
  { 60, -1, -1, sizeof(::opentelemetry::proto::profiles::v1development::Link)},
  { 68, -1, -1, sizeof(::opentelemetry::proto::profiles::v1development::ValueType)},
  { 77, 89, -1, sizeof(::opentelemetry::proto::profiles::v1development::Sample)},
  { 95, -1, -1, sizeof(::opentelemetry::proto::profiles::v1development::Mapping)},
  { 110, 121, -1, sizeof(::opentelemetry::proto::profiles::v1development::Location)},
  { 126, -1, -1, sizeof(::opentelemetry::proto::profiles::v1development::Line)},
  { 135, -1, -1, sizeof(::opentelemetry::proto::profiles::v1development::Function)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::opentelemetry::proto::profiles::v1development::_ProfilesData_default_instance_._instance,
  &::opentelemetry::proto::profiles::v1development::_ResourceProfiles_default_instance_._instance,
  &::opentelemetry::proto::profiles::v1development::_ScopeProfiles_default_instance_._instance,
  &::opentelemetry::proto::profiles::v1development::_Profile_default_instance_._instance,
  &::opentelemetry::proto::profiles::v1development::_AttributeUnit_default_instance_._instance,
  &::opentelemetry::proto::profiles::v1development::_Link_default_instance_._instance,
  &::opentelemetry::proto::profiles::v1development::_ValueType_default_instance_._instance,
  &::opentelemetry::proto::profiles::v1development::_Sample_default_instance_._instance,
  &::opentelemetry::proto::profiles::v1development::_Mapping_default_instance_._instance,
  &::opentelemetry::proto::profiles::v1development::_Location_default_instance_._instance,
  &::opentelemetry::proto::profiles::v1development::_Line_default_instance_._instance,
  &::opentelemetry::proto::profiles::v1development::_Function_default_instance_._instance,
};

const char descriptor_table_protodef_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n9opentelemetry/proto/profiles/v1develop"
  "ment/profiles.proto\022*opentelemetry.proto"
  ".profiles.v1development\032*opentelemetry/p"
  "roto/common/v1/common.proto\032.opentelemet"
  "ry/proto/resource/v1/resource.proto\"g\n\014P"
  "rofilesData\022W\n\021resource_profiles\030\001 \003(\0132<"
  ".opentelemetry.proto.profiles.v1developm"
  "ent.ResourceProfiles\"\276\001\n\020ResourceProfile"
  "s\022;\n\010resource\030\001 \001(\0132).opentelemetry.prot"
  "o.resource.v1.Resource\022Q\n\016scope_profiles"
  "\030\002 \003(\01329.opentelemetry.proto.profiles.v1"
  "development.ScopeProfiles\022\022\n\nschema_url\030"
  "\003 \001(\tJ\006\010\350\007\020\351\007\"\256\001\n\rScopeProfiles\022B\n\005scope"
  "\030\001 \001(\01323.opentelemetry.proto.common.v1.I"
  "nstrumentationScope\022E\n\010profiles\030\002 \003(\01323."
  "opentelemetry.proto.profiles.v1developme"
  "nt.Profile\022\022\n\nschema_url\030\003 \001(\t\"\340\007\n\007Profi"
  "le\022J\n\013sample_type\030\001 \003(\01325.opentelemetry."
  "proto.profiles.v1development.ValueType\022B"
  "\n\006sample\030\002 \003(\01322.opentelemetry.proto.pro"
  "files.v1development.Sample\022J\n\rmapping_ta"
  "ble\030\003 \003(\01323.opentelemetry.proto.profiles"
  ".v1development.Mapping\022L\n\016location_table"
  "\030\004 \003(\01324.opentelemetry.proto.profiles.v1"
  "development.Location\022\030\n\020location_indices"
  "\030\005 \003(\005\022L\n\016function_table\030\006 \003(\01324.opentel"
  "emetry.proto.profiles.v1development.Func"
  "tion\022@\n\017attribute_table\030\007 \003(\0132\'.opentele"
  "metry.proto.common.v1.KeyValue\022R\n\017attrib"
  "ute_units\030\010 \003(\01329.opentelemetry.proto.pr"
  "ofiles.v1development.AttributeUnit\022D\n\nli"
  "nk_table\030\t \003(\01320.opentelemetry.proto.pro"
  "files.v1development.Link\022\024\n\014string_table"
  "\030\n \003(\t\022\022\n\ntime_nanos\030\013 \001(\003\022\026\n\016duration_n"
  "anos\030\014 \001(\003\022J\n\013period_type\030\r \001(\01325.opente"
  "lemetry.proto.profiles.v1development.Val"
  "ueType\022\016\n\006period\030\016 \001(\003\022\032\n\022comment_strind"
  "ices\030\017 \003(\005\022!\n\031default_sample_type_index\030"
  "\020 \001(\005\022\022\n\nprofile_id\030\021 \001(\014\022 \n\030dropped_att"
  "ributes_count\030\023 \001(\r\022\037\n\027original_payload_"
  "format\030\024 \001(\t\022\030\n\020original_payload\030\025 \001(\014\022\031"
  "\n\021attribute_indices\030\026 \003(\005\"F\n\rAttributeUn"
  "it\022\036\n\026attribute_key_strindex\030\001 \001(\005\022\025\n\run"
  "it_strindex\030\002 \001(\005\")\n\004Link\022\020\n\010trace_id\030\001 "
  "\001(\014\022\017\n\007span_id\030\002 \001(\014\"\236\001\n\tValueType\022\025\n\rty"
  "pe_strindex\030\001 \001(\005\022\025\n\runit_strindex\030\002 \001(\005"
  "\022c\n\027aggregation_temporality\030\003 \001(\0162B.open"
  "telemetry.proto.profiles.v1development.A"
  "ggregationTemporality\"\261\001\n\006Sample\022\035\n\025loca"
  "tions_start_index\030\001 \001(\005\022\030\n\020locations_len"
  "gth\030\002 \001(\005\022\r\n\005value\030\003 \003(\003\022\031\n\021attribute_in"
  "dices\030\004 \003(\005\022\027\n\nlink_index\030\005 \001(\005H\000\210\001\001\022\034\n\024"
  "timestamps_unix_nano\030\006 \003(\004B\r\n\013_link_inde"
  "x\"\343\001\n\007Mapping\022\024\n\014memory_start\030\001 \001(\004\022\024\n\014m"
  "emory_limit\030\002 \001(\004\022\023\n\013file_offset\030\003 \001(\004\022\031"
  "\n\021filename_strindex\030\004 \001(\005\022\031\n\021attribute_i"
  "ndices\030\005 \003(\005\022\025\n\rhas_functions\030\006 \001(\010\022\025\n\rh"
  "as_filenames\030\007 \001(\010\022\030\n\020has_line_numbers\030\010"
  " \001(\010\022\031\n\021has_inline_frames\030\t \001(\010\"\267\001\n\010Loca"
  "tion\022\032\n\rmapping_index\030\001 \001(\005H\000\210\001\001\022\017\n\007addr"
  "ess\030\002 \001(\004\022>\n\004line\030\003 \003(\01320.opentelemetry."
  "proto.profiles.v1development.Line\022\021\n\tis_"
  "folded\030\004 \001(\010\022\031\n\021attribute_indices\030\005 \003(\005B"
  "\020\n\016_mapping_index\"<\n\004Line\022\026\n\016function_in"
  "dex\030\001 \001(\005\022\014\n\004line\030\002 \001(\003\022\016\n\006column\030\003 \001(\003\""
  "n\n\010Function\022\025\n\rname_strindex\030\001 \001(\005\022\034\n\024sy"
  "stem_name_strindex\030\002 \001(\005\022\031\n\021filename_str"
  "index\030\003 \001(\005\022\022\n\nstart_line\030\004 \001(\003*\214\001\n\026Aggr"
  "egationTemporality\022\'\n#AGGREGATION_TEMPOR"
  "ALITY_UNSPECIFIED\020\000\022!\n\035AGGREGATION_TEMPO"
  "RALITY_DELTA\020\001\022&\n\"AGGREGATION_TEMPORALIT"
  "Y_CUMULATIVE\020\002B\244\001\n-io.opentelemetry.prot"
  "o.profiles.v1developmentB\rProfilesProtoP"
  "\001Z5go.opentelemetry.io/proto/otlp/profil"
  "es/v1development\252\002*OpenTelemetry.Proto.P"
  "rofiles.V1Developmentb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_deps[2] = {
  &::descriptor_table_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto,
  &::descriptor_table_opentelemetry_2fproto_2fresource_2fv1_2fresource_2eproto,
};
static ::_pbi::once_flag descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto = {
    false, false, 3029, descriptor_table_protodef_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto,
    "opentelemetry/proto/profiles/v1development/profiles.proto",
    &descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_once, descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_deps, 2, 12,
    schemas, file_default_instances, TableStruct_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto::offsets,
    file_level_metadata_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto, file_level_enum_descriptors_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto,
    file_level_service_descriptors_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_getter() {
  return &descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto(&descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto);
namespace opentelemetry {
namespace proto {
namespace profiles {
namespace v1development {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AggregationTemporality_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto);
  return file_level_enum_descriptors_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto[0];
}
bool AggregationTemporality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ProfilesData::_Internal {
 public:
};

ProfilesData::ProfilesData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.profiles.v1development.ProfilesData)
}
ProfilesData::ProfilesData(const ProfilesData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProfilesData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_profiles_){from._impl_.resource_profiles_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.profiles.v1development.ProfilesData)
}

inline void ProfilesData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_profiles_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProfilesData::~ProfilesData() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.profiles.v1development.ProfilesData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProfilesData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.resource_profiles_.~RepeatedPtrField();
}

void ProfilesData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProfilesData::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.profiles.v1development.ProfilesData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.resource_profiles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilesData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.profiles.v1development.ResourceProfiles resource_profiles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resource_profiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProfilesData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.profiles.v1development.ProfilesData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.profiles.v1development.ResourceProfiles resource_profiles = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_resource_profiles_size()); i < n; i++) {
    const auto& repfield = this->_internal_resource_profiles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.profiles.v1development.ProfilesData)
  return target;
}

size_t ProfilesData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.profiles.v1development.ProfilesData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.profiles.v1development.ResourceProfiles resource_profiles = 1;
  total_size += 1UL * this->_internal_resource_profiles_size();
  for (const auto& msg : this->_impl_.resource_profiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProfilesData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProfilesData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProfilesData::GetClassData() const { return &_class_data_; }


void ProfilesData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProfilesData*>(&to_msg);
  auto& from = static_cast<const ProfilesData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.profiles.v1development.ProfilesData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.resource_profiles_.MergeFrom(from._impl_.resource_profiles_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProfilesData::CopyFrom(const ProfilesData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.profiles.v1development.ProfilesData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilesData::IsInitialized() const {
  return true;
}

void ProfilesData::InternalSwap(ProfilesData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.resource_profiles_.InternalSwap(&other->_impl_.resource_profiles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilesData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_getter, &descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_once,
      file_level_metadata_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto[0]);
}

// ===================================================================

class ResourceProfiles::_Internal {
 public:
  static const ::opentelemetry::proto::resource::v1::Resource& resource(const ResourceProfiles* msg);
};

const ::opentelemetry::proto::resource::v1::Resource&
ResourceProfiles::_Internal::resource(const ResourceProfiles* msg) {
  return *msg->_impl_.resource_;
}
void ResourceProfiles::clear_resource() {
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
}
ResourceProfiles::ResourceProfiles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.profiles.v1development.ResourceProfiles)
}
ResourceProfiles::ResourceProfiles(const ResourceProfiles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResourceProfiles* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scope_profiles_){from._impl_.scope_profiles_}
    , decltype(_impl_.schema_url_){}
    , decltype(_impl_.resource_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.schema_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_schema_url().empty()) {
    _this->_impl_.schema_url_.Set(from._internal_schema_url(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_resource()) {
    _this->_impl_.resource_ = new ::opentelemetry::proto::resource::v1::Resource(*from._impl_.resource_);
  }
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.profiles.v1development.ResourceProfiles)
}

inline void ResourceProfiles::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scope_profiles_){arena}
    , decltype(_impl_.schema_url_){}
    , decltype(_impl_.resource_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.schema_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResourceProfiles::~ResourceProfiles() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.profiles.v1development.ResourceProfiles)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResourceProfiles::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.scope_profiles_.~RepeatedPtrField();
  _impl_.schema_url_.Destroy();
  if (this != internal_default_instance()) delete _impl_.resource_;
}

void ResourceProfiles::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResourceProfiles::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.profiles.v1development.ResourceProfiles)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.scope_profiles_.Clear();
  _impl_.schema_url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceProfiles::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opentelemetry.proto.resource.v1.Resource resource = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.profiles.v1development.ScopeProfiles scope_profiles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scope_profiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string schema_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_schema_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opentelemetry.proto.profiles.v1development.ResourceProfiles.schema_url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResourceProfiles::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.profiles.v1development.ResourceProfiles)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opentelemetry.proto.resource.v1.Resource resource = 1;
  if (this->_internal_has_resource()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::resource(this),
        _Internal::resource(this).GetCachedSize(), target, stream);
  }

  // repeated .opentelemetry.proto.profiles.v1development.ScopeProfiles scope_profiles = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_scope_profiles_size()); i < n; i++) {
    const auto& repfield = this->_internal_scope_profiles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string schema_url = 3;
  if (!this->_internal_schema_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_schema_url().data(), static_cast<int>(this->_internal_schema_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentelemetry.proto.profiles.v1development.ResourceProfiles.schema_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_schema_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.profiles.v1development.ResourceProfiles)
  return target;
}

size_t ResourceProfiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.profiles.v1development.ResourceProfiles)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.profiles.v1development.ScopeProfiles scope_profiles = 2;
  total_size += 1UL * this->_internal_scope_profiles_size();
  for (const auto& msg : this->_impl_.scope_profiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string schema_url = 3;
  if (!this->_internal_schema_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_schema_url());
  }

  // .opentelemetry.proto.resource.v1.Resource resource = 1;
  if (this->_internal_has_resource()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.resource_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceProfiles::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResourceProfiles::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceProfiles::GetClassData() const { return &_class_data_; }


void ResourceProfiles::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResourceProfiles*>(&to_msg);
  auto& from = static_cast<const ResourceProfiles&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.profiles.v1development.ResourceProfiles)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.scope_profiles_.MergeFrom(from._impl_.scope_profiles_);
  if (!from._internal_schema_url().empty()) {
    _this->_internal_set_schema_url(from._internal_schema_url());
  }
  if (from._internal_has_resource()) {
    _this->_internal_mutable_resource()->::opentelemetry::proto::resource::v1::Resource::MergeFrom(
        from._internal_resource());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceProfiles::CopyFrom(const ResourceProfiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.profiles.v1development.ResourceProfiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceProfiles::IsInitialized() const {
  return true;
}

void ResourceProfiles::InternalSwap(ResourceProfiles* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.scope_profiles_.InternalSwap(&other->_impl_.scope_profiles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.schema_url_, lhs_arena,
      &other->_impl_.schema_url_, rhs_arena
  );
  swap(_impl_.resource_, other->_impl_.resource_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceProfiles::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_getter, &descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_once,
      file_level_metadata_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto[1]);
}

// ===================================================================

class ScopeProfiles::_Internal {
 public:
  static const ::opentelemetry::proto::common::v1::InstrumentationScope& scope(const ScopeProfiles* msg);
};

const ::opentelemetry::proto::common::v1::InstrumentationScope&
ScopeProfiles::_Internal::scope(const ScopeProfiles* msg) {
  return *msg->_impl_.scope_;
}
void ScopeProfiles::clear_scope() {
  if (GetArenaForAllocation() == nullptr && _impl_.scope_ != nullptr) {
    delete _impl_.scope_;
  }
  _impl_.scope_ = nullptr;
}
ScopeProfiles::ScopeProfiles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.profiles.v1development.ScopeProfiles)
}
ScopeProfiles::ScopeProfiles(const ScopeProfiles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScopeProfiles* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.profiles_){from._impl_.profiles_}
    , decltype(_impl_.schema_url_){}
    , decltype(_impl_.scope_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.schema_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_schema_url().empty()) {
    _this->_impl_.schema_url_.Set(from._internal_schema_url(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_scope()) {
    _this->_impl_.scope_ = new ::opentelemetry::proto::common::v1::InstrumentationScope(*from._impl_.scope_);
  }
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.profiles.v1development.ScopeProfiles)
}

inline void ScopeProfiles::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.profiles_){arena}
    , decltype(_impl_.schema_url_){}
    , decltype(_impl_.scope_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.schema_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScopeProfiles::~ScopeProfiles() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.profiles.v1development.ScopeProfiles)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScopeProfiles::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.profiles_.~RepeatedPtrField();
  _impl_.schema_url_.Destroy();
  if (this != internal_default_instance()) delete _impl_.scope_;
}

void ScopeProfiles::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScopeProfiles::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.profiles.v1development.ScopeProfiles)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.profiles_.Clear();
  _impl_.schema_url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.scope_ != nullptr) {
    delete _impl_.scope_;
  }
  _impl_.scope_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScopeProfiles::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scope(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.profiles.v1development.Profile profiles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_profiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string schema_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_schema_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opentelemetry.proto.profiles.v1development.ScopeProfiles.schema_url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScopeProfiles::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.profiles.v1development.ScopeProfiles)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
  if (this->_internal_has_scope()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::scope(this),
        _Internal::scope(this).GetCachedSize(), target, stream);
  }

  // repeated .opentelemetry.proto.profiles.v1development.Profile profiles = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_profiles_size()); i < n; i++) {
    const auto& repfield = this->_internal_profiles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string schema_url = 3;
  if (!this->_internal_schema_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_schema_url().data(), static_cast<int>(this->_internal_schema_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentelemetry.proto.profiles.v1development.ScopeProfiles.schema_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_schema_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.profiles.v1development.ScopeProfiles)
  return target;
}

size_t ScopeProfiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.profiles.v1development.ScopeProfiles)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.profiles.v1development.Profile profiles = 2;
  total_size += 1UL * this->_internal_profiles_size();
  for (const auto& msg : this->_impl_.profiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string schema_url = 3;
  if (!this->_internal_schema_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_schema_url());
  }

  // .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
  if (this->_internal_has_scope()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scope_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScopeProfiles::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScopeProfiles::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScopeProfiles::GetClassData() const { return &_class_data_; }


void ScopeProfiles::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScopeProfiles*>(&to_msg);
  auto& from = static_cast<const ScopeProfiles&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.profiles.v1development.ScopeProfiles)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.profiles_.MergeFrom(from._impl_.profiles_);
  if (!from._internal_schema_url().empty()) {
    _this->_internal_set_schema_url(from._internal_schema_url());
  }
  if (from._internal_has_scope()) {
    _this->_internal_mutable_scope()->::opentelemetry::proto::common::v1::InstrumentationScope::MergeFrom(
        from._internal_scope());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScopeProfiles::CopyFrom(const ScopeProfiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.profiles.v1development.ScopeProfiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScopeProfiles::IsInitialized() const {
  return true;
}

void ScopeProfiles::InternalSwap(ScopeProfiles* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.profiles_.InternalSwap(&other->_impl_.profiles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.schema_url_, lhs_arena,
      &other->_impl_.schema_url_, rhs_arena
  );
  swap(_impl_.scope_, other->_impl_.scope_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScopeProfiles::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_getter, &descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_once,
      file_level_metadata_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto[2]);
}

// ===================================================================

class Profile::_Internal {
 public:
  static const ::opentelemetry::proto::profiles::v1development::ValueType& period_type(const Profile* msg);
};

const ::opentelemetry::proto::profiles::v1development::ValueType&
Profile::_Internal::period_type(const Profile* msg) {
  return *msg->_impl_.period_type_;
}
void Profile::clear_attribute_table() {
  _impl_.attribute_table_.Clear();
}
Profile::Profile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.profiles.v1development.Profile)
}
Profile::Profile(const Profile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Profile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sample_type_){from._impl_.sample_type_}
    , decltype(_impl_.sample_){from._impl_.sample_}
    , decltype(_impl_.mapping_table_){from._impl_.mapping_table_}
    , decltype(_impl_.location_table_){from._impl_.location_table_}
    , decltype(_impl_.location_indices_){from._impl_.location_indices_}
    , /*decltype(_impl_._location_indices_cached_byte_size_)*/{0}
    , decltype(_impl_.function_table_){from._impl_.function_table_}
    , decltype(_impl_.attribute_table_){from._impl_.attribute_table_}
    , decltype(_impl_.attribute_units_){from._impl_.attribute_units_}
    , decltype(_impl_.link_table_){from._impl_.link_table_}
    , decltype(_impl_.string_table_){from._impl_.string_table_}
    , decltype(_impl_.comment_strindices_){from._impl_.comment_strindices_}
    , /*decltype(_impl_._comment_strindices_cached_byte_size_)*/{0}
    , decltype(_impl_.attribute_indices_){from._impl_.attribute_indices_}
    , /*decltype(_impl_._attribute_indices_cached_byte_size_)*/{0}
    , decltype(_impl_.profile_id_){}
    , decltype(_impl_.original_payload_format_){}
    , decltype(_impl_.original_payload_){}
    , decltype(_impl_.period_type_){nullptr}
    , decltype(_impl_.time_nanos_){}
    , decltype(_impl_.duration_nanos_){}
    , decltype(_impl_.period_){}
    , decltype(_impl_.default_sample_type_index_){}
    , decltype(_impl_.dropped_attributes_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.profile_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profile_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_profile_id().empty()) {
    _this->_impl_.profile_id_.Set(from._internal_profile_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.original_payload_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.original_payload_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_original_payload_format().empty()) {
    _this->_impl_.original_payload_format_.Set(from._internal_original_payload_format(), 
      _this->GetArenaForAllocation());
  }
  _impl_.original_payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.original_payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_original_payload().empty()) {
    _this->_impl_.original_payload_.Set(from._internal_original_payload(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_period_type()) {
    _this->_impl_.period_type_ = new ::opentelemetry::proto::profiles::v1development::ValueType(*from._impl_.period_type_);
  }
  ::memcpy(&_impl_.time_nanos_, &from._impl_.time_nanos_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dropped_attributes_count_) -
    reinterpret_cast<char*>(&_impl_.time_nanos_)) + sizeof(_impl_.dropped_attributes_count_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.profiles.v1development.Profile)
}

inline void Profile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sample_type_){arena}
    , decltype(_impl_.sample_){arena}
    , decltype(_impl_.mapping_table_){arena}
    , decltype(_impl_.location_table_){arena}
    , decltype(_impl_.location_indices_){arena}
    , /*decltype(_impl_._location_indices_cached_byte_size_)*/{0}
    , decltype(_impl_.function_table_){arena}
    , decltype(_impl_.attribute_table_){arena}
    , decltype(_impl_.attribute_units_){arena}
    , decltype(_impl_.link_table_){arena}
    , decltype(_impl_.string_table_){arena}
    , decltype(_impl_.comment_strindices_){arena}
    , /*decltype(_impl_._comment_strindices_cached_byte_size_)*/{0}
    , decltype(_impl_.attribute_indices_){arena}
    , /*decltype(_impl_._attribute_indices_cached_byte_size_)*/{0}
    , decltype(_impl_.profile_id_){}
    , decltype(_impl_.original_payload_format_){}
    , decltype(_impl_.original_payload_){}
    , decltype(_impl_.period_type_){nullptr}
    , decltype(_impl_.time_nanos_){int64_t{0}}
    , decltype(_impl_.duration_nanos_){int64_t{0}}
    , decltype(_impl_.period_){int64_t{0}}
    , decltype(_impl_.default_sample_type_index_){0}
    , decltype(_impl_.dropped_attributes_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.profile_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profile_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.original_payload_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.original_payload_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.original_payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.original_payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Profile::~Profile() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.profiles.v1development.Profile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Profile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sample_type_.~RepeatedPtrField();
  _impl_.sample_.~RepeatedPtrField();
  _impl_.mapping_table_.~RepeatedPtrField();
  _impl_.location_table_.~RepeatedPtrField();
  _impl_.location_indices_.~RepeatedField();
  _impl_.function_table_.~RepeatedPtrField();
  _impl_.attribute_table_.~RepeatedPtrField();
  _impl_.attribute_units_.~RepeatedPtrField();
  _impl_.link_table_.~RepeatedPtrField();
  _impl_.string_table_.~RepeatedPtrField();
  _impl_.comment_strindices_.~RepeatedField();
  _impl_.attribute_indices_.~RepeatedField();
  _impl_.profile_id_.Destroy();
  _impl_.original_payload_format_.Destroy();
  _impl_.original_payload_.Destroy();
  if (this != internal_default_instance()) delete _impl_.period_type_;
}

void Profile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Profile::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.profiles.v1development.Profile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sample_type_.Clear();
  _impl_.sample_.Clear();
  _impl_.mapping_table_.Clear();
  _impl_.location_table_.Clear();
  _impl_.location_indices_.Clear();
  _impl_.function_table_.Clear();
  _impl_.attribute_table_.Clear();
  _impl_.attribute_units_.Clear();
  _impl_.link_table_.Clear();
  _impl_.string_table_.Clear();
  _impl_.comment_strindices_.Clear();
  _impl_.attribute_indices_.Clear();
  _impl_.profile_id_.ClearToEmpty();
  _impl_.original_payload_format_.ClearToEmpty();
  _impl_.original_payload_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.period_type_ != nullptr) {
    delete _impl_.period_type_;
  }
  _impl_.period_type_ = nullptr;
  ::memset(&_impl_.time_nanos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dropped_attributes_count_) -
      reinterpret_cast<char*>(&_impl_.time_nanos_)) + sizeof(_impl_.dropped_attributes_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Profile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.profiles.v1development.ValueType sample_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sample_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.profiles.v1development.Sample sample = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sample(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.profiles.v1development.Mapping mapping_table = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mapping_table(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.profiles.v1development.Location location_table = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_location_table(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 location_indices = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_location_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_location_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.profiles.v1development.Function function_table = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_function_table(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.common.v1.KeyValue attribute_table = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute_table(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.profiles.v1development.AttributeUnit attribute_units = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute_units(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.profiles.v1development.Link link_table = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_link_table(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string string_table = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_string_table();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "opentelemetry.proto.profiles.v1development.Profile.string_table"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 time_nanos = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.time_nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 duration_nanos = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.duration_nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opentelemetry.proto.profiles.v1development.ValueType period_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_period_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 period = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 comment_strindices = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_comment_strindices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 120) {
          _internal_add_comment_strindices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 default_sample_type_index = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.default_sample_type_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes profile_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_profile_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dropped_attributes_count = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.dropped_attributes_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string original_payload_format = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_original_payload_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opentelemetry.proto.profiles.v1development.Profile.original_payload_format"));
        } else
          goto handle_unusual;
        continue;
      // bytes original_payload = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_original_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 attribute_indices = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_attribute_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 176) {
          _internal_add_attribute_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Profile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.profiles.v1development.Profile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.profiles.v1development.ValueType sample_type = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sample_type_size()); i < n; i++) {
    const auto& repfield = this->_internal_sample_type(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .opentelemetry.proto.profiles.v1development.Sample sample = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sample_size()); i < n; i++) {
    const auto& repfield = this->_internal_sample(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .opentelemetry.proto.profiles.v1development.Mapping mapping_table = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mapping_table_size()); i < n; i++) {
    const auto& repfield = this->_internal_mapping_table(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .opentelemetry.proto.profiles.v1development.Location location_table = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_location_table_size()); i < n; i++) {
    const auto& repfield = this->_internal_location_table(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 location_indices = 5;
  {
    int byte_size = _impl_._location_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_location_indices(), byte_size, target);
    }
  }

  // repeated .opentelemetry.proto.profiles.v1development.Function function_table = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_function_table_size()); i < n; i++) {
    const auto& repfield = this->_internal_function_table(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .opentelemetry.proto.common.v1.KeyValue attribute_table = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attribute_table_size()); i < n; i++) {
    const auto& repfield = this->_internal_attribute_table(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .opentelemetry.proto.profiles.v1development.AttributeUnit attribute_units = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attribute_units_size()); i < n; i++) {
    const auto& repfield = this->_internal_attribute_units(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .opentelemetry.proto.profiles.v1development.Link link_table = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_link_table_size()); i < n; i++) {
    const auto& repfield = this->_internal_link_table(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string string_table = 10;
  for (int i = 0, n = this->_internal_string_table_size(); i < n; i++) {
    const auto& s = this->_internal_string_table(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentelemetry.proto.profiles.v1development.Profile.string_table");
    target = stream->WriteString(10, s, target);
  }

  // int64 time_nanos = 11;
  if (this->_internal_time_nanos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_time_nanos(), target);
  }

  // int64 duration_nanos = 12;
  if (this->_internal_duration_nanos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_duration_nanos(), target);
  }

  // .opentelemetry.proto.profiles.v1development.ValueType period_type = 13;
  if (this->_internal_has_period_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::period_type(this),
        _Internal::period_type(this).GetCachedSize(), target, stream);
  }

  // int64 period = 14;
  if (this->_internal_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_period(), target);
  }

  // repeated int32 comment_strindices = 15;
  {
    int byte_size = _impl_._comment_strindices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          15, _internal_comment_strindices(), byte_size, target);
    }
  }

  // int32 default_sample_type_index = 16;
  if (this->_internal_default_sample_type_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_default_sample_type_index(), target);
  }

  // bytes profile_id = 17;
  if (!this->_internal_profile_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        17, this->_internal_profile_id(), target);
  }

  // uint32 dropped_attributes_count = 19;
  if (this->_internal_dropped_attributes_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_dropped_attributes_count(), target);
  }

  // string original_payload_format = 20;
  if (!this->_internal_original_payload_format().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_original_payload_format().data(), static_cast<int>(this->_internal_original_payload_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentelemetry.proto.profiles.v1development.Profile.original_payload_format");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_original_payload_format(), target);
  }

  // bytes original_payload = 21;
  if (!this->_internal_original_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        21, this->_internal_original_payload(), target);
  }

  // repeated int32 attribute_indices = 22;
  {
    int byte_size = _impl_._attribute_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          22, _internal_attribute_indices(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.profiles.v1development.Profile)
  return target;
}

size_t Profile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.profiles.v1development.Profile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.profiles.v1development.ValueType sample_type = 1;
  total_size += 1UL * this->_internal_sample_type_size();
  for (const auto& msg : this->_impl_.sample_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opentelemetry.proto.profiles.v1development.Sample sample = 2;
  total_size += 1UL * this->_internal_sample_size();
  for (const auto& msg : this->_impl_.sample_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opentelemetry.proto.profiles.v1development.Mapping mapping_table = 3;
  total_size += 1UL * this->_internal_mapping_table_size();
  for (const auto& msg : this->_impl_.mapping_table_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opentelemetry.proto.profiles.v1development.Location location_table = 4;
  total_size += 1UL * this->_internal_location_table_size();
  for (const auto& msg : this->_impl_.location_table_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 location_indices = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.location_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._location_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .opentelemetry.proto.profiles.v1development.Function function_table = 6;
  total_size += 1UL * this->_internal_function_table_size();
  for (const auto& msg : this->_impl_.function_table_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opentelemetry.proto.common.v1.KeyValue attribute_table = 7;
  total_size += 1UL * this->_internal_attribute_table_size();
  for (const auto& msg : this->_impl_.attribute_table_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opentelemetry.proto.profiles.v1development.AttributeUnit attribute_units = 8;
  total_size += 1UL * this->_internal_attribute_units_size();
  for (const auto& msg : this->_impl_.attribute_units_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opentelemetry.proto.profiles.v1development.Link link_table = 9;
  total_size += 1UL * this->_internal_link_table_size();
  for (const auto& msg : this->_impl_.link_table_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string string_table = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.string_table_.size());
  for (int i = 0, n = _impl_.string_table_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.string_table_.Get(i));
  }

  // repeated int32 comment_strindices = 15;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.comment_strindices_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._comment_strindices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 attribute_indices = 22;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.attribute_indices_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._attribute_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes profile_id = 17;
  if (!this->_internal_profile_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_profile_id());
  }

  // string original_payload_format = 20;
  if (!this->_internal_original_payload_format().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_original_payload_format());
  }

  // bytes original_payload = 21;
  if (!this->_internal_original_payload().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_original_payload());
  }

  // .opentelemetry.proto.profiles.v1development.ValueType period_type = 13;
  if (this->_internal_has_period_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.period_type_);
  }

  // int64 time_nanos = 11;
  if (this->_internal_time_nanos() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time_nanos());
  }

  // int64 duration_nanos = 12;
  if (this->_internal_duration_nanos() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_duration_nanos());
  }

  // int64 period = 14;
  if (this->_internal_period() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_period());
  }

  // int32 default_sample_type_index = 16;
  if (this->_internal_default_sample_type_index() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_default_sample_type_index());
  }

  // uint32 dropped_attributes_count = 19;
  if (this->_internal_dropped_attributes_count() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_dropped_attributes_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Profile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Profile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Profile::GetClassData() const { return &_class_data_; }


void Profile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Profile*>(&to_msg);
  auto& from = static_cast<const Profile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.profiles.v1development.Profile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sample_type_.MergeFrom(from._impl_.sample_type_);
  _this->_impl_.sample_.MergeFrom(from._impl_.sample_);
  _this->_impl_.mapping_table_.MergeFrom(from._impl_.mapping_table_);
  _this->_impl_.location_table_.MergeFrom(from._impl_.location_table_);
  _this->_impl_.location_indices_.MergeFrom(from._impl_.location_indices_);
  _this->_impl_.function_table_.MergeFrom(from._impl_.function_table_);
  _this->_impl_.attribute_table_.MergeFrom(from._impl_.attribute_table_);
  _this->_impl_.attribute_units_.MergeFrom(from._impl_.attribute_units_);
  _this->_impl_.link_table_.MergeFrom(from._impl_.link_table_);
  _this->_impl_.string_table_.MergeFrom(from._impl_.string_table_);
  _this->_impl_.comment_strindices_.MergeFrom(from._impl_.comment_strindices_);
  _this->_impl_.attribute_indices_.MergeFrom(from._impl_.attribute_indices_);
  if (!from._internal_profile_id().empty()) {
    _this->_internal_set_profile_id(from._internal_profile_id());
  }
  if (!from._internal_original_payload_format().empty()) {
    _this->_internal_set_original_payload_format(from._internal_original_payload_format());
  }
  if (!from._internal_original_payload().empty()) {
    _this->_internal_set_original_payload(from._internal_original_payload());
  }
  if (from._internal_has_period_type()) {
    _this->_internal_mutable_period_type()->::opentelemetry::proto::profiles::v1development::ValueType::MergeFrom(
        from._internal_period_type());
  }
  if (from._internal_time_nanos() != 0) {
    _this->_internal_set_time_nanos(from._internal_time_nanos());
  }
  if (from._internal_duration_nanos() != 0) {
    _this->_internal_set_duration_nanos(from._internal_duration_nanos());
  }
  if (from._internal_period() != 0) {
    _this->_internal_set_period(from._internal_period());
  }
  if (from._internal_default_sample_type_index() != 0) {
    _this->_internal_set_default_sample_type_index(from._internal_default_sample_type_index());
  }
  if (from._internal_dropped_attributes_count() != 0) {
    _this->_internal_set_dropped_attributes_count(from._internal_dropped_attributes_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Profile::CopyFrom(const Profile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.profiles.v1development.Profile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Profile::IsInitialized() const {
  return true;
}

void Profile::InternalSwap(Profile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sample_type_.InternalSwap(&other->_impl_.sample_type_);
  _impl_.sample_.InternalSwap(&other->_impl_.sample_);
  _impl_.mapping_table_.InternalSwap(&other->_impl_.mapping_table_);
  _impl_.location_table_.InternalSwap(&other->_impl_.location_table_);
  _impl_.location_indices_.InternalSwap(&other->_impl_.location_indices_);
  _impl_.function_table_.InternalSwap(&other->_impl_.function_table_);
  _impl_.attribute_table_.InternalSwap(&other->_impl_.attribute_table_);
  _impl_.attribute_units_.InternalSwap(&other->_impl_.attribute_units_);
  _impl_.link_table_.InternalSwap(&other->_impl_.link_table_);
  _impl_.string_table_.InternalSwap(&other->_impl_.string_table_);
  _impl_.comment_strindices_.InternalSwap(&other->_impl_.comment_strindices_);
  _impl_.attribute_indices_.InternalSwap(&other->_impl_.attribute_indices_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.profile_id_, lhs_arena,
      &other->_impl_.profile_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.original_payload_format_, lhs_arena,
      &other->_impl_.original_payload_format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.original_payload_, lhs_arena,
      &other->_impl_.original_payload_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Profile, _impl_.dropped_attributes_count_)
      + sizeof(Profile::_impl_.dropped_attributes_count_)
      - PROTOBUF_FIELD_OFFSET(Profile, _impl_.period_type_)>(
          reinterpret_cast<char*>(&_impl_.period_type_),
          reinterpret_cast<char*>(&other->_impl_.period_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Profile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_getter, &descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_once,
      file_level_metadata_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto[3]);
}

// ===================================================================

class AttributeUnit::_Internal {
 public:
};

AttributeUnit::AttributeUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.profiles.v1development.AttributeUnit)
}
AttributeUnit::AttributeUnit(const AttributeUnit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AttributeUnit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attribute_key_strindex_){}
    , decltype(_impl_.unit_strindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.attribute_key_strindex_, &from._impl_.attribute_key_strindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unit_strindex_) -
    reinterpret_cast<char*>(&_impl_.attribute_key_strindex_)) + sizeof(_impl_.unit_strindex_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.profiles.v1development.AttributeUnit)
}

inline void AttributeUnit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attribute_key_strindex_){0}
    , decltype(_impl_.unit_strindex_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AttributeUnit::~AttributeUnit() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.profiles.v1development.AttributeUnit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttributeUnit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AttributeUnit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AttributeUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.profiles.v1development.AttributeUnit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.attribute_key_strindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.unit_strindex_) -
      reinterpret_cast<char*>(&_impl_.attribute_key_strindex_)) + sizeof(_impl_.unit_strindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttributeUnit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 attribute_key_strindex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.attribute_key_strindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 unit_strindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.unit_strindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttributeUnit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.profiles.v1development.AttributeUnit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 attribute_key_strindex = 1;
  if (this->_internal_attribute_key_strindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_attribute_key_strindex(), target);
  }

  // int32 unit_strindex = 2;
  if (this->_internal_unit_strindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_unit_strindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.profiles.v1development.AttributeUnit)
  return target;
}

size_t AttributeUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.profiles.v1development.AttributeUnit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 attribute_key_strindex = 1;
  if (this->_internal_attribute_key_strindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_attribute_key_strindex());
  }

  // int32 unit_strindex = 2;
  if (this->_internal_unit_strindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unit_strindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttributeUnit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AttributeUnit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttributeUnit::GetClassData() const { return &_class_data_; }


void AttributeUnit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AttributeUnit*>(&to_msg);
  auto& from = static_cast<const AttributeUnit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.profiles.v1development.AttributeUnit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_attribute_key_strindex() != 0) {
    _this->_internal_set_attribute_key_strindex(from._internal_attribute_key_strindex());
  }
  if (from._internal_unit_strindex() != 0) {
    _this->_internal_set_unit_strindex(from._internal_unit_strindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttributeUnit::CopyFrom(const AttributeUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.profiles.v1development.AttributeUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeUnit::IsInitialized() const {
  return true;
}

void AttributeUnit::InternalSwap(AttributeUnit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AttributeUnit, _impl_.unit_strindex_)
      + sizeof(AttributeUnit::_impl_.unit_strindex_)
      - PROTOBUF_FIELD_OFFSET(AttributeUnit, _impl_.attribute_key_strindex_)>(
          reinterpret_cast<char*>(&_impl_.attribute_key_strindex_),
          reinterpret_cast<char*>(&other->_impl_.attribute_key_strindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AttributeUnit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_getter, &descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_once,
      file_level_metadata_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto[4]);
}

// ===================================================================

class Link::_Internal {
 public:
};

Link::Link(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.profiles.v1development.Link)
}
Link::Link(const Link& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Link* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trace_id_){}
    , decltype(_impl_.span_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.trace_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trace_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trace_id().empty()) {
    _this->_impl_.trace_id_.Set(from._internal_trace_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.span_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.span_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_span_id().empty()) {
    _this->_impl_.span_id_.Set(from._internal_span_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.profiles.v1development.Link)
}

inline void Link::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trace_id_){}
    , decltype(_impl_.span_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.trace_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trace_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.span_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.span_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Link::~Link() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.profiles.v1development.Link)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Link::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trace_id_.Destroy();
  _impl_.span_id_.Destroy();
}

void Link::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Link::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.profiles.v1development.Link)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trace_id_.ClearToEmpty();
  _impl_.span_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Link::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes trace_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_trace_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes span_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_span_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Link::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.profiles.v1development.Link)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes trace_id = 1;
  if (!this->_internal_trace_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_trace_id(), target);
  }

  // bytes span_id = 2;
  if (!this->_internal_span_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_span_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.profiles.v1development.Link)
  return target;
}

size_t Link::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.profiles.v1development.Link)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes trace_id = 1;
  if (!this->_internal_trace_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_trace_id());
  }

  // bytes span_id = 2;
  if (!this->_internal_span_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_span_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Link::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Link::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Link::GetClassData() const { return &_class_data_; }


void Link::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Link*>(&to_msg);
  auto& from = static_cast<const Link&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.profiles.v1development.Link)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trace_id().empty()) {
    _this->_internal_set_trace_id(from._internal_trace_id());
  }
  if (!from._internal_span_id().empty()) {
    _this->_internal_set_span_id(from._internal_span_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Link::CopyFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.profiles.v1development.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Link::IsInitialized() const {
  return true;
}

void Link::InternalSwap(Link* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.trace_id_, lhs_arena,
      &other->_impl_.trace_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.span_id_, lhs_arena,
      &other->_impl_.span_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Link::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_getter, &descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_once,
      file_level_metadata_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto[5]);
}

// ===================================================================

class ValueType::_Internal {
 public:
};

ValueType::ValueType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.profiles.v1development.ValueType)
}
ValueType::ValueType(const ValueType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValueType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_strindex_){}
    , decltype(_impl_.unit_strindex_){}
    , decltype(_impl_.aggregation_temporality_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_strindex_, &from._impl_.type_strindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.aggregation_temporality_) -
    reinterpret_cast<char*>(&_impl_.type_strindex_)) + sizeof(_impl_.aggregation_temporality_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.profiles.v1development.ValueType)
}

inline void ValueType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_strindex_){0}
    , decltype(_impl_.unit_strindex_){0}
    , decltype(_impl_.aggregation_temporality_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ValueType::~ValueType() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.profiles.v1development.ValueType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValueType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ValueType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValueType::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.profiles.v1development.ValueType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_strindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.aggregation_temporality_) -
      reinterpret_cast<char*>(&_impl_.type_strindex_)) + sizeof(_impl_.aggregation_temporality_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValueType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type_strindex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_strindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 unit_strindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.unit_strindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opentelemetry.proto.profiles.v1development.AggregationTemporality aggregation_temporality = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_aggregation_temporality(static_cast<::opentelemetry::proto::profiles::v1development::AggregationTemporality>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ValueType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.profiles.v1development.ValueType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type_strindex = 1;
  if (this->_internal_type_strindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type_strindex(), target);
  }

  // int32 unit_strindex = 2;
  if (this->_internal_unit_strindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_unit_strindex(), target);
  }

  // .opentelemetry.proto.profiles.v1development.AggregationTemporality aggregation_temporality = 3;
  if (this->_internal_aggregation_temporality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_aggregation_temporality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.profiles.v1development.ValueType)
  return target;
}

size_t ValueType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.profiles.v1development.ValueType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type_strindex = 1;
  if (this->_internal_type_strindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type_strindex());
  }

  // int32 unit_strindex = 2;
  if (this->_internal_unit_strindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unit_strindex());
  }

  // .opentelemetry.proto.profiles.v1development.AggregationTemporality aggregation_temporality = 3;
  if (this->_internal_aggregation_temporality() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_aggregation_temporality());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValueType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValueType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValueType::GetClassData() const { return &_class_data_; }


void ValueType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValueType*>(&to_msg);
  auto& from = static_cast<const ValueType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.profiles.v1development.ValueType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type_strindex() != 0) {
    _this->_internal_set_type_strindex(from._internal_type_strindex());
  }
  if (from._internal_unit_strindex() != 0) {
    _this->_internal_set_unit_strindex(from._internal_unit_strindex());
  }
  if (from._internal_aggregation_temporality() != 0) {
    _this->_internal_set_aggregation_temporality(from._internal_aggregation_temporality());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValueType::CopyFrom(const ValueType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.profiles.v1development.ValueType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueType::IsInitialized() const {
  return true;
}

void ValueType::InternalSwap(ValueType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValueType, _impl_.aggregation_temporality_)
      + sizeof(ValueType::_impl_.aggregation_temporality_)
      - PROTOBUF_FIELD_OFFSET(ValueType, _impl_.type_strindex_)>(
          reinterpret_cast<char*>(&_impl_.type_strindex_),
          reinterpret_cast<char*>(&other->_impl_.type_strindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValueType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_getter, &descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_once,
      file_level_metadata_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto[6]);
}

// ===================================================================

class Sample::_Internal {
 public:
  using HasBits = decltype(std::declval<Sample>()._impl_._has_bits_);
  static void set_has_link_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Sample::Sample(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.profiles.v1development.Sample)
}
Sample::Sample(const Sample& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Sample* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){from._impl_.value_}
    , /*decltype(_impl_._value_cached_byte_size_)*/{0}
    , decltype(_impl_.attribute_indices_){from._impl_.attribute_indices_}
    , /*decltype(_impl_._attribute_indices_cached_byte_size_)*/{0}
    , decltype(_impl_.timestamps_unix_nano_){from._impl_.timestamps_unix_nano_}
    , /*decltype(_impl_._timestamps_unix_nano_cached_byte_size_)*/{0}
    , decltype(_impl_.locations_start_index_){}
    , decltype(_impl_.locations_length_){}
    , decltype(_impl_.link_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.locations_start_index_, &from._impl_.locations_start_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.link_index_) -
    reinterpret_cast<char*>(&_impl_.locations_start_index_)) + sizeof(_impl_.link_index_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.profiles.v1development.Sample)
}

inline void Sample::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){arena}
    , /*decltype(_impl_._value_cached_byte_size_)*/{0}
    , decltype(_impl_.attribute_indices_){arena}
    , /*decltype(_impl_._attribute_indices_cached_byte_size_)*/{0}
    , decltype(_impl_.timestamps_unix_nano_){arena}
    , /*decltype(_impl_._timestamps_unix_nano_cached_byte_size_)*/{0}
    , decltype(_impl_.locations_start_index_){0}
    , decltype(_impl_.locations_length_){0}
    , decltype(_impl_.link_index_){0}
  };
}

Sample::~Sample() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.profiles.v1development.Sample)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sample::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedField();
  _impl_.attribute_indices_.~RepeatedField();
  _impl_.timestamps_unix_nano_.~RepeatedField();
}

void Sample::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sample::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.profiles.v1development.Sample)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _impl_.attribute_indices_.Clear();
  _impl_.timestamps_unix_nano_.Clear();
  ::memset(&_impl_.locations_start_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.locations_length_) -
      reinterpret_cast<char*>(&_impl_.locations_start_index_)) + sizeof(_impl_.locations_length_));
  _impl_.link_index_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sample::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 locations_start_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.locations_start_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 locations_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.locations_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 attribute_indices = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_attribute_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_attribute_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 link_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_link_index(&has_bits);
          _impl_.link_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 timestamps_unix_nano = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_timestamps_unix_nano(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_timestamps_unix_nano(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Sample::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.profiles.v1development.Sample)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 locations_start_index = 1;
  if (this->_internal_locations_start_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_locations_start_index(), target);
  }

  // int32 locations_length = 2;
  if (this->_internal_locations_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_locations_length(), target);
  }

  // repeated int64 value = 3;
  {
    int byte_size = _impl_._value_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_value(), byte_size, target);
    }
  }

  // repeated int32 attribute_indices = 4;
  {
    int byte_size = _impl_._attribute_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_attribute_indices(), byte_size, target);
    }
  }

  // optional int32 link_index = 5;
  if (_internal_has_link_index()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_link_index(), target);
  }

  // repeated uint64 timestamps_unix_nano = 6;
  {
    int byte_size = _impl_._timestamps_unix_nano_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          6, _internal_timestamps_unix_nano(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.profiles.v1development.Sample)
  return target;
}

size_t Sample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.profiles.v1development.Sample)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 value = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.value_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 attribute_indices = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.attribute_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._attribute_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 timestamps_unix_nano = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.timestamps_unix_nano_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._timestamps_unix_nano_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 locations_start_index = 1;
  if (this->_internal_locations_start_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_locations_start_index());
  }

  // int32 locations_length = 2;
  if (this->_internal_locations_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_locations_length());
  }

  // optional int32 link_index = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_link_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sample::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Sample::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sample::GetClassData() const { return &_class_data_; }


void Sample::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Sample*>(&to_msg);
  auto& from = static_cast<const Sample&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.profiles.v1development.Sample)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_impl_.attribute_indices_.MergeFrom(from._impl_.attribute_indices_);
  _this->_impl_.timestamps_unix_nano_.MergeFrom(from._impl_.timestamps_unix_nano_);
  if (from._internal_locations_start_index() != 0) {
    _this->_internal_set_locations_start_index(from._internal_locations_start_index());
  }
  if (from._internal_locations_length() != 0) {
    _this->_internal_set_locations_length(from._internal_locations_length());
  }
  if (from._internal_has_link_index()) {
    _this->_internal_set_link_index(from._internal_link_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sample::CopyFrom(const Sample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.profiles.v1development.Sample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sample::IsInitialized() const {
  return true;
}

void Sample::InternalSwap(Sample* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
  _impl_.attribute_indices_.InternalSwap(&other->_impl_.attribute_indices_);
  _impl_.timestamps_unix_nano_.InternalSwap(&other->_impl_.timestamps_unix_nano_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sample, _impl_.link_index_)
      + sizeof(Sample::_impl_.link_index_)
      - PROTOBUF_FIELD_OFFSET(Sample, _impl_.locations_start_index_)>(
          reinterpret_cast<char*>(&_impl_.locations_start_index_),
          reinterpret_cast<char*>(&other->_impl_.locations_start_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sample::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_getter, &descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_once,
      file_level_metadata_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto[7]);
}

// ===================================================================

class Mapping::_Internal {
 public:
};

Mapping::Mapping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.profiles.v1development.Mapping)
}
Mapping::Mapping(const Mapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Mapping* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attribute_indices_){from._impl_.attribute_indices_}
    , /*decltype(_impl_._attribute_indices_cached_byte_size_)*/{0}
    , decltype(_impl_.memory_start_){}
    , decltype(_impl_.memory_limit_){}
    , decltype(_impl_.file_offset_){}
    , decltype(_impl_.filename_strindex_){}
    , decltype(_impl_.has_functions_){}
    , decltype(_impl_.has_filenames_){}
    , decltype(_impl_.has_line_numbers_){}
    , decltype(_impl_.has_inline_frames_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.memory_start_, &from._impl_.memory_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.has_inline_frames_) -
    reinterpret_cast<char*>(&_impl_.memory_start_)) + sizeof(_impl_.has_inline_frames_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.profiles.v1development.Mapping)
}

inline void Mapping::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attribute_indices_){arena}
    , /*decltype(_impl_._attribute_indices_cached_byte_size_)*/{0}
    , decltype(_impl_.memory_start_){uint64_t{0u}}
    , decltype(_impl_.memory_limit_){uint64_t{0u}}
    , decltype(_impl_.file_offset_){uint64_t{0u}}
    , decltype(_impl_.filename_strindex_){0}
    , decltype(_impl_.has_functions_){false}
    , decltype(_impl_.has_filenames_){false}
    , decltype(_impl_.has_line_numbers_){false}
    , decltype(_impl_.has_inline_frames_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Mapping::~Mapping() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.profiles.v1development.Mapping)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Mapping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attribute_indices_.~RepeatedField();
}

void Mapping::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Mapping::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.profiles.v1development.Mapping)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attribute_indices_.Clear();
  ::memset(&_impl_.memory_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.has_inline_frames_) -
      reinterpret_cast<char*>(&_impl_.memory_start_)) + sizeof(_impl_.has_inline_frames_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mapping::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 memory_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.memory_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 memory_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.memory_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 file_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.file_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 filename_strindex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.filename_strindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 attribute_indices = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_attribute_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_attribute_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_functions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.has_functions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_filenames = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.has_filenames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_line_numbers = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.has_line_numbers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_inline_frames = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.has_inline_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mapping::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.profiles.v1development.Mapping)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 memory_start = 1;
  if (this->_internal_memory_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_memory_start(), target);
  }

  // uint64 memory_limit = 2;
  if (this->_internal_memory_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_memory_limit(), target);
  }

  // uint64 file_offset = 3;
  if (this->_internal_file_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_file_offset(), target);
  }

  // int32 filename_strindex = 4;
  if (this->_internal_filename_strindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_filename_strindex(), target);
  }

  // repeated int32 attribute_indices = 5;
  {
    int byte_size = _impl_._attribute_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_attribute_indices(), byte_size, target);
    }
  }

  // bool has_functions = 6;
  if (this->_internal_has_functions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_has_functions(), target);
  }

  // bool has_filenames = 7;
  if (this->_internal_has_filenames() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_has_filenames(), target);
  }

  // bool has_line_numbers = 8;
  if (this->_internal_has_line_numbers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_has_line_numbers(), target);
  }

  // bool has_inline_frames = 9;
  if (this->_internal_has_inline_frames() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_has_inline_frames(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.profiles.v1development.Mapping)
  return target;
}

size_t Mapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.profiles.v1development.Mapping)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 attribute_indices = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.attribute_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._attribute_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 memory_start = 1;
  if (this->_internal_memory_start() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_memory_start());
  }

  // uint64 memory_limit = 2;
  if (this->_internal_memory_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_memory_limit());
  }

  // uint64 file_offset = 3;
  if (this->_internal_file_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_file_offset());
  }

  // int32 filename_strindex = 4;
  if (this->_internal_filename_strindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_filename_strindex());
  }

  // bool has_functions = 6;
  if (this->_internal_has_functions() != 0) {
    total_size += 1 + 1;
  }

  // bool has_filenames = 7;
  if (this->_internal_has_filenames() != 0) {
    total_size += 1 + 1;
  }

  // bool has_line_numbers = 8;
  if (this->_internal_has_line_numbers() != 0) {
    total_size += 1 + 1;
  }

  // bool has_inline_frames = 9;
  if (this->_internal_has_inline_frames() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mapping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Mapping::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mapping::GetClassData() const { return &_class_data_; }


void Mapping::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Mapping*>(&to_msg);
  auto& from = static_cast<const Mapping&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.profiles.v1development.Mapping)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attribute_indices_.MergeFrom(from._impl_.attribute_indices_);
  if (from._internal_memory_start() != 0) {
    _this->_internal_set_memory_start(from._internal_memory_start());
  }
  if (from._internal_memory_limit() != 0) {
    _this->_internal_set_memory_limit(from._internal_memory_limit());
  }
  if (from._internal_file_offset() != 0) {
    _this->_internal_set_file_offset(from._internal_file_offset());
  }
  if (from._internal_filename_strindex() != 0) {
    _this->_internal_set_filename_strindex(from._internal_filename_strindex());
  }
  if (from._internal_has_functions() != 0) {
    _this->_internal_set_has_functions(from._internal_has_functions());
  }
  if (from._internal_has_filenames() != 0) {
    _this->_internal_set_has_filenames(from._internal_has_filenames());
  }
  if (from._internal_has_line_numbers() != 0) {
    _this->_internal_set_has_line_numbers(from._internal_has_line_numbers());
  }
  if (from._internal_has_inline_frames() != 0) {
    _this->_internal_set_has_inline_frames(from._internal_has_inline_frames());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mapping::CopyFrom(const Mapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.profiles.v1development.Mapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mapping::IsInitialized() const {
  return true;
}

void Mapping::InternalSwap(Mapping* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attribute_indices_.InternalSwap(&other->_impl_.attribute_indices_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mapping, _impl_.has_inline_frames_)
      + sizeof(Mapping::_impl_.has_inline_frames_)
      - PROTOBUF_FIELD_OFFSET(Mapping, _impl_.memory_start_)>(
          reinterpret_cast<char*>(&_impl_.memory_start_),
          reinterpret_cast<char*>(&other->_impl_.memory_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Mapping::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_getter, &descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_once,
      file_level_metadata_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto[8]);
}

// ===================================================================

class Location::_Internal {
 public:
  using HasBits = decltype(std::declval<Location>()._impl_._has_bits_);
  static void set_has_mapping_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Location::Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.profiles.v1development.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Location* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.line_){from._impl_.line_}
    , decltype(_impl_.attribute_indices_){from._impl_.attribute_indices_}
    , /*decltype(_impl_._attribute_indices_cached_byte_size_)*/{0}
    , decltype(_impl_.address_){}
    , decltype(_impl_.mapping_index_){}
    , decltype(_impl_.is_folded_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.address_, &from._impl_.address_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_folded_) -
    reinterpret_cast<char*>(&_impl_.address_)) + sizeof(_impl_.is_folded_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.profiles.v1development.Location)
}

inline void Location::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.line_){arena}
    , decltype(_impl_.attribute_indices_){arena}
    , /*decltype(_impl_._attribute_indices_cached_byte_size_)*/{0}
    , decltype(_impl_.address_){uint64_t{0u}}
    , decltype(_impl_.mapping_index_){0}
    , decltype(_impl_.is_folded_){false}
  };
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.profiles.v1development.Location)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.line_.~RepeatedPtrField();
  _impl_.attribute_indices_.~RepeatedField();
}

void Location::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.profiles.v1development.Location)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.line_.Clear();
  _impl_.attribute_indices_.Clear();
  _impl_.address_ = uint64_t{0u};
  _impl_.mapping_index_ = 0;
  _impl_.is_folded_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Location::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mapping_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mapping_index(&has_bits);
          _impl_.mapping_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.profiles.v1development.Line line = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool is_folded = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.is_folded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 attribute_indices = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_attribute_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_attribute_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Location::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.profiles.v1development.Location)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mapping_index = 1;
  if (_internal_has_mapping_index()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mapping_index(), target);
  }

  // uint64 address = 2;
  if (this->_internal_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_address(), target);
  }

  // repeated .opentelemetry.proto.profiles.v1development.Line line = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_line_size()); i < n; i++) {
    const auto& repfield = this->_internal_line(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool is_folded = 4;
  if (this->_internal_is_folded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_folded(), target);
  }

  // repeated int32 attribute_indices = 5;
  {
    int byte_size = _impl_._attribute_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_attribute_indices(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.profiles.v1development.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.profiles.v1development.Location)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.profiles.v1development.Line line = 3;
  total_size += 1UL * this->_internal_line_size();
  for (const auto& msg : this->_impl_.line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 attribute_indices = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.attribute_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._attribute_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 address = 2;
  if (this->_internal_address() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_address());
  }

  // optional int32 mapping_index = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mapping_index());
  }

  // bool is_folded = 4;
  if (this->_internal_is_folded() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Location::GetClassData() const { return &_class_data_; }


void Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Location*>(&to_msg);
  auto& from = static_cast<const Location&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.profiles.v1development.Location)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.line_.MergeFrom(from._impl_.line_);
  _this->_impl_.attribute_indices_.MergeFrom(from._impl_.attribute_indices_);
  if (from._internal_address() != 0) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_has_mapping_index()) {
    _this->_internal_set_mapping_index(from._internal_mapping_index());
  }
  if (from._internal_is_folded() != 0) {
    _this->_internal_set_is_folded(from._internal_is_folded());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.profiles.v1development.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.line_.InternalSwap(&other->_impl_.line_);
  _impl_.attribute_indices_.InternalSwap(&other->_impl_.attribute_indices_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Location, _impl_.is_folded_)
      + sizeof(Location::_impl_.is_folded_)
      - PROTOBUF_FIELD_OFFSET(Location, _impl_.address_)>(
          reinterpret_cast<char*>(&_impl_.address_),
          reinterpret_cast<char*>(&other->_impl_.address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_getter, &descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_once,
      file_level_metadata_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto[9]);
}

// ===================================================================

class Line::_Internal {
 public:
};

Line::Line(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.profiles.v1development.Line)
}
Line::Line(const Line& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Line* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.line_){}
    , decltype(_impl_.column_){}
    , decltype(_impl_.function_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.line_, &from._impl_.line_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.function_index_) -
    reinterpret_cast<char*>(&_impl_.line_)) + sizeof(_impl_.function_index_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.profiles.v1development.Line)
}

inline void Line::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.line_){int64_t{0}}
    , decltype(_impl_.column_){int64_t{0}}
    , decltype(_impl_.function_index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Line::~Line() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.profiles.v1development.Line)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Line::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Line::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Line::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.profiles.v1development.Line)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.function_index_) -
      reinterpret_cast<char*>(&_impl_.line_)) + sizeof(_impl_.function_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Line::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 function_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.function_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 column = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Line::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.profiles.v1development.Line)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 function_index = 1;
  if (this->_internal_function_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_function_index(), target);
  }

  // int64 line = 2;
  if (this->_internal_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_line(), target);
  }

  // int64 column = 3;
  if (this->_internal_column() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_column(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.profiles.v1development.Line)
  return target;
}

size_t Line::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.profiles.v1development.Line)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 line = 2;
  if (this->_internal_line() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_line());
  }

  // int64 column = 3;
  if (this->_internal_column() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_column());
  }

  // int32 function_index = 1;
  if (this->_internal_function_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_function_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Line::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Line::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Line::GetClassData() const { return &_class_data_; }


void Line::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Line*>(&to_msg);
  auto& from = static_cast<const Line&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.profiles.v1development.Line)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_line() != 0) {
    _this->_internal_set_line(from._internal_line());
  }
  if (from._internal_column() != 0) {
    _this->_internal_set_column(from._internal_column());
  }
  if (from._internal_function_index() != 0) {
    _this->_internal_set_function_index(from._internal_function_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Line::CopyFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.profiles.v1development.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Line::IsInitialized() const {
  return true;
}

void Line::InternalSwap(Line* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Line, _impl_.function_index_)
      + sizeof(Line::_impl_.function_index_)
      - PROTOBUF_FIELD_OFFSET(Line, _impl_.line_)>(
          reinterpret_cast<char*>(&_impl_.line_),
          reinterpret_cast<char*>(&other->_impl_.line_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Line::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_getter, &descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_once,
      file_level_metadata_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto[10]);
}

// ===================================================================

class Function::_Internal {
 public:
};

Function::Function(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.profiles.v1development.Function)
}
Function::Function(const Function& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Function* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_strindex_){}
    , decltype(_impl_.system_name_strindex_){}
    , decltype(_impl_.start_line_){}
    , decltype(_impl_.filename_strindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.name_strindex_, &from._impl_.name_strindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.filename_strindex_) -
    reinterpret_cast<char*>(&_impl_.name_strindex_)) + sizeof(_impl_.filename_strindex_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.profiles.v1development.Function)
}

inline void Function::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_strindex_){0}
    , decltype(_impl_.system_name_strindex_){0}
    , decltype(_impl_.start_line_){int64_t{0}}
    , decltype(_impl_.filename_strindex_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Function::~Function() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.profiles.v1development.Function)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Function::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Function::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Function::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.profiles.v1development.Function)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.name_strindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.filename_strindex_) -
      reinterpret_cast<char*>(&_impl_.name_strindex_)) + sizeof(_impl_.filename_strindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Function::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 name_strindex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.name_strindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 system_name_strindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.system_name_strindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 filename_strindex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.filename_strindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 start_line = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.start_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Function::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.profiles.v1development.Function)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 name_strindex = 1;
  if (this->_internal_name_strindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_name_strindex(), target);
  }

  // int32 system_name_strindex = 2;
  if (this->_internal_system_name_strindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_system_name_strindex(), target);
  }

  // int32 filename_strindex = 3;
  if (this->_internal_filename_strindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_filename_strindex(), target);
  }

  // int64 start_line = 4;
  if (this->_internal_start_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_start_line(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.profiles.v1development.Function)
  return target;
}

size_t Function::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.profiles.v1development.Function)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 name_strindex = 1;
  if (this->_internal_name_strindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_name_strindex());
  }

  // int32 system_name_strindex = 2;
  if (this->_internal_system_name_strindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_system_name_strindex());
  }

  // int64 start_line = 4;
  if (this->_internal_start_line() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_line());
  }

  // int32 filename_strindex = 3;
  if (this->_internal_filename_strindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_filename_strindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Function::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Function::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Function::GetClassData() const { return &_class_data_; }


void Function::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Function*>(&to_msg);
  auto& from = static_cast<const Function&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.profiles.v1development.Function)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_name_strindex() != 0) {
    _this->_internal_set_name_strindex(from._internal_name_strindex());
  }
  if (from._internal_system_name_strindex() != 0) {
    _this->_internal_set_system_name_strindex(from._internal_system_name_strindex());
  }
  if (from._internal_start_line() != 0) {
    _this->_internal_set_start_line(from._internal_start_line());
  }
  if (from._internal_filename_strindex() != 0) {
    _this->_internal_set_filename_strindex(from._internal_filename_strindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Function::CopyFrom(const Function& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.profiles.v1development.Function)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Function::IsInitialized() const {
  return true;
}

void Function::InternalSwap(Function* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Function, _impl_.filename_strindex_)
      + sizeof(Function::_impl_.filename_strindex_)
      - PROTOBUF_FIELD_OFFSET(Function, _impl_.name_strindex_)>(
          reinterpret_cast<char*>(&_impl_.name_strindex_),
          reinterpret_cast<char*>(&other->_impl_.name_strindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Function::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_getter, &descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_once,
      file_level_metadata_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1development
}  // namespace profiles
}  // namespace proto
}  // namespace opentelemetry
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::profiles::v1development::ProfilesData*
Arena::CreateMaybeMessage< ::opentelemetry::proto::profiles::v1development::ProfilesData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::profiles::v1development::ProfilesData >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::profiles::v1development::ResourceProfiles*
Arena::CreateMaybeMessage< ::opentelemetry::proto::profiles::v1development::ResourceProfiles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::profiles::v1development::ResourceProfiles >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::profiles::v1development::ScopeProfiles*
Arena::CreateMaybeMessage< ::opentelemetry::proto::profiles::v1development::ScopeProfiles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::profiles::v1development::ScopeProfiles >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::profiles::v1development::Profile*
Arena::CreateMaybeMessage< ::opentelemetry::proto::profiles::v1development::Profile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::profiles::v1development::Profile >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::profiles::v1development::AttributeUnit*
Arena::CreateMaybeMessage< ::opentelemetry::proto::profiles::v1development::AttributeUnit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::profiles::v1development::AttributeUnit >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::profiles::v1development::Link*
Arena::CreateMaybeMessage< ::opentelemetry::proto::profiles::v1development::Link >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::profiles::v1development::Link >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::profiles::v1development::ValueType*
Arena::CreateMaybeMessage< ::opentelemetry::proto::profiles::v1development::ValueType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::profiles::v1development::ValueType >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::profiles::v1development::Sample*
Arena::CreateMaybeMessage< ::opentelemetry::proto::profiles::v1development::Sample >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::profiles::v1development::Sample >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::profiles::v1development::Mapping*
Arena::CreateMaybeMessage< ::opentelemetry::proto::profiles::v1development::Mapping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::profiles::v1development::Mapping >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::profiles::v1development::Location*
Arena::CreateMaybeMessage< ::opentelemetry::proto::profiles::v1development::Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::profiles::v1development::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::profiles::v1development::Line*
Arena::CreateMaybeMessage< ::opentelemetry::proto::profiles::v1development::Line >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::profiles::v1development::Line >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::profiles::v1development::Function*
Arena::CreateMaybeMessage< ::opentelemetry::proto::profiles::v1development::Function >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::profiles::v1development::Function >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
