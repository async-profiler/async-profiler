// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/collector/metrics/v1/metrics_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2fcollector_2fmetrics_2fv1_2fmetrics_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2fcollector_2fmetrics_2fv1_2fmetrics_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "opentelemetry/proto/metrics/v1/metrics.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fcollector_2fmetrics_2fv1_2fmetrics_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_opentelemetry_2fproto_2fcollector_2fmetrics_2fv1_2fmetrics_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_opentelemetry_2fproto_2fcollector_2fmetrics_2fv1_2fmetrics_5fservice_2eproto;
namespace opentelemetry {
namespace proto {
namespace collector {
namespace metrics {
namespace v1 {
class ExportMetricsPartialSuccess;
struct ExportMetricsPartialSuccessDefaultTypeInternal;
extern ExportMetricsPartialSuccessDefaultTypeInternal _ExportMetricsPartialSuccess_default_instance_;
class ExportMetricsServiceRequest;
struct ExportMetricsServiceRequestDefaultTypeInternal;
extern ExportMetricsServiceRequestDefaultTypeInternal _ExportMetricsServiceRequest_default_instance_;
class ExportMetricsServiceResponse;
struct ExportMetricsServiceResponseDefaultTypeInternal;
extern ExportMetricsServiceResponseDefaultTypeInternal _ExportMetricsServiceResponse_default_instance_;
}  // namespace v1
}  // namespace metrics
}  // namespace collector
}  // namespace proto
}  // namespace opentelemetry
PROTOBUF_NAMESPACE_OPEN
template<> ::opentelemetry::proto::collector::metrics::v1::ExportMetricsPartialSuccess* Arena::CreateMaybeMessage<::opentelemetry::proto::collector::metrics::v1::ExportMetricsPartialSuccess>(Arena*);
template<> ::opentelemetry::proto::collector::metrics::v1::ExportMetricsServiceRequest* Arena::CreateMaybeMessage<::opentelemetry::proto::collector::metrics::v1::ExportMetricsServiceRequest>(Arena*);
template<> ::opentelemetry::proto::collector::metrics::v1::ExportMetricsServiceResponse* Arena::CreateMaybeMessage<::opentelemetry::proto::collector::metrics::v1::ExportMetricsServiceResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opentelemetry {
namespace proto {
namespace collector {
namespace metrics {
namespace v1 {

// ===================================================================

class ExportMetricsServiceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest) */ {
 public:
  inline ExportMetricsServiceRequest() : ExportMetricsServiceRequest(nullptr) {}
  ~ExportMetricsServiceRequest() override;
  explicit PROTOBUF_CONSTEXPR ExportMetricsServiceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExportMetricsServiceRequest(const ExportMetricsServiceRequest& from);
  ExportMetricsServiceRequest(ExportMetricsServiceRequest&& from) noexcept
    : ExportMetricsServiceRequest() {
    *this = ::std::move(from);
  }

  inline ExportMetricsServiceRequest& operator=(const ExportMetricsServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportMetricsServiceRequest& operator=(ExportMetricsServiceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExportMetricsServiceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExportMetricsServiceRequest* internal_default_instance() {
    return reinterpret_cast<const ExportMetricsServiceRequest*>(
               &_ExportMetricsServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExportMetricsServiceRequest& a, ExportMetricsServiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportMetricsServiceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportMetricsServiceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExportMetricsServiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExportMetricsServiceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExportMetricsServiceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExportMetricsServiceRequest& from) {
    ExportMetricsServiceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportMetricsServiceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest";
  }
  protected:
  explicit ExportMetricsServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceMetricsFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.metrics.v1.ResourceMetrics resource_metrics = 1;
  int resource_metrics_size() const;
  private:
  int _internal_resource_metrics_size() const;
  public:
  void clear_resource_metrics();
  ::opentelemetry::proto::metrics::v1::ResourceMetrics* mutable_resource_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::ResourceMetrics >*
      mutable_resource_metrics();
  private:
  const ::opentelemetry::proto::metrics::v1::ResourceMetrics& _internal_resource_metrics(int index) const;
  ::opentelemetry::proto::metrics::v1::ResourceMetrics* _internal_add_resource_metrics();
  public:
  const ::opentelemetry::proto::metrics::v1::ResourceMetrics& resource_metrics(int index) const;
  ::opentelemetry::proto::metrics::v1::ResourceMetrics* add_resource_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::ResourceMetrics >&
      resource_metrics() const;

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::ResourceMetrics > resource_metrics_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fcollector_2fmetrics_2fv1_2fmetrics_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ExportMetricsServiceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse) */ {
 public:
  inline ExportMetricsServiceResponse() : ExportMetricsServiceResponse(nullptr) {}
  ~ExportMetricsServiceResponse() override;
  explicit PROTOBUF_CONSTEXPR ExportMetricsServiceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExportMetricsServiceResponse(const ExportMetricsServiceResponse& from);
  ExportMetricsServiceResponse(ExportMetricsServiceResponse&& from) noexcept
    : ExportMetricsServiceResponse() {
    *this = ::std::move(from);
  }

  inline ExportMetricsServiceResponse& operator=(const ExportMetricsServiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportMetricsServiceResponse& operator=(ExportMetricsServiceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExportMetricsServiceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExportMetricsServiceResponse* internal_default_instance() {
    return reinterpret_cast<const ExportMetricsServiceResponse*>(
               &_ExportMetricsServiceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ExportMetricsServiceResponse& a, ExportMetricsServiceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportMetricsServiceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportMetricsServiceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExportMetricsServiceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExportMetricsServiceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExportMetricsServiceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExportMetricsServiceResponse& from) {
    ExportMetricsServiceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportMetricsServiceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse";
  }
  protected:
  explicit ExportMetricsServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartialSuccessFieldNumber = 1,
  };
  // .opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess partial_success = 1;
  bool has_partial_success() const;
  private:
  bool _internal_has_partial_success() const;
  public:
  void clear_partial_success();
  const ::opentelemetry::proto::collector::metrics::v1::ExportMetricsPartialSuccess& partial_success() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::collector::metrics::v1::ExportMetricsPartialSuccess* release_partial_success();
  ::opentelemetry::proto::collector::metrics::v1::ExportMetricsPartialSuccess* mutable_partial_success();
  void set_allocated_partial_success(::opentelemetry::proto::collector::metrics::v1::ExportMetricsPartialSuccess* partial_success);
  private:
  const ::opentelemetry::proto::collector::metrics::v1::ExportMetricsPartialSuccess& _internal_partial_success() const;
  ::opentelemetry::proto::collector::metrics::v1::ExportMetricsPartialSuccess* _internal_mutable_partial_success();
  public:
  void unsafe_arena_set_allocated_partial_success(
      ::opentelemetry::proto::collector::metrics::v1::ExportMetricsPartialSuccess* partial_success);
  ::opentelemetry::proto::collector::metrics::v1::ExportMetricsPartialSuccess* unsafe_arena_release_partial_success();

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::opentelemetry::proto::collector::metrics::v1::ExportMetricsPartialSuccess* partial_success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fcollector_2fmetrics_2fv1_2fmetrics_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ExportMetricsPartialSuccess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess) */ {
 public:
  inline ExportMetricsPartialSuccess() : ExportMetricsPartialSuccess(nullptr) {}
  ~ExportMetricsPartialSuccess() override;
  explicit PROTOBUF_CONSTEXPR ExportMetricsPartialSuccess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExportMetricsPartialSuccess(const ExportMetricsPartialSuccess& from);
  ExportMetricsPartialSuccess(ExportMetricsPartialSuccess&& from) noexcept
    : ExportMetricsPartialSuccess() {
    *this = ::std::move(from);
  }

  inline ExportMetricsPartialSuccess& operator=(const ExportMetricsPartialSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportMetricsPartialSuccess& operator=(ExportMetricsPartialSuccess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExportMetricsPartialSuccess& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExportMetricsPartialSuccess* internal_default_instance() {
    return reinterpret_cast<const ExportMetricsPartialSuccess*>(
               &_ExportMetricsPartialSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ExportMetricsPartialSuccess& a, ExportMetricsPartialSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportMetricsPartialSuccess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportMetricsPartialSuccess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExportMetricsPartialSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExportMetricsPartialSuccess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExportMetricsPartialSuccess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExportMetricsPartialSuccess& from) {
    ExportMetricsPartialSuccess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportMetricsPartialSuccess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess";
  }
  protected:
  explicit ExportMetricsPartialSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 2,
    kRejectedDataPointsFieldNumber = 1,
  };
  // string error_message = 2;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // int64 rejected_data_points = 1;
  void clear_rejected_data_points();
  int64_t rejected_data_points() const;
  void set_rejected_data_points(int64_t value);
  private:
  int64_t _internal_rejected_data_points() const;
  void _internal_set_rejected_data_points(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    int64_t rejected_data_points_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fcollector_2fmetrics_2fv1_2fmetrics_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExportMetricsServiceRequest

// repeated .opentelemetry.proto.metrics.v1.ResourceMetrics resource_metrics = 1;
inline int ExportMetricsServiceRequest::_internal_resource_metrics_size() const {
  return _impl_.resource_metrics_.size();
}
inline int ExportMetricsServiceRequest::resource_metrics_size() const {
  return _internal_resource_metrics_size();
}
inline ::opentelemetry::proto::metrics::v1::ResourceMetrics* ExportMetricsServiceRequest::mutable_resource_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest.resource_metrics)
  return _impl_.resource_metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::ResourceMetrics >*
ExportMetricsServiceRequest::mutable_resource_metrics() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest.resource_metrics)
  return &_impl_.resource_metrics_;
}
inline const ::opentelemetry::proto::metrics::v1::ResourceMetrics& ExportMetricsServiceRequest::_internal_resource_metrics(int index) const {
  return _impl_.resource_metrics_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::ResourceMetrics& ExportMetricsServiceRequest::resource_metrics(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest.resource_metrics)
  return _internal_resource_metrics(index);
}
inline ::opentelemetry::proto::metrics::v1::ResourceMetrics* ExportMetricsServiceRequest::_internal_add_resource_metrics() {
  return _impl_.resource_metrics_.Add();
}
inline ::opentelemetry::proto::metrics::v1::ResourceMetrics* ExportMetricsServiceRequest::add_resource_metrics() {
  ::opentelemetry::proto::metrics::v1::ResourceMetrics* _add = _internal_add_resource_metrics();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest.resource_metrics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::ResourceMetrics >&
ExportMetricsServiceRequest::resource_metrics() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest.resource_metrics)
  return _impl_.resource_metrics_;
}

// -------------------------------------------------------------------

// ExportMetricsServiceResponse

// .opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess partial_success = 1;
inline bool ExportMetricsServiceResponse::_internal_has_partial_success() const {
  return this != internal_default_instance() && _impl_.partial_success_ != nullptr;
}
inline bool ExportMetricsServiceResponse::has_partial_success() const {
  return _internal_has_partial_success();
}
inline void ExportMetricsServiceResponse::clear_partial_success() {
  if (GetArenaForAllocation() == nullptr && _impl_.partial_success_ != nullptr) {
    delete _impl_.partial_success_;
  }
  _impl_.partial_success_ = nullptr;
}
inline const ::opentelemetry::proto::collector::metrics::v1::ExportMetricsPartialSuccess& ExportMetricsServiceResponse::_internal_partial_success() const {
  const ::opentelemetry::proto::collector::metrics::v1::ExportMetricsPartialSuccess* p = _impl_.partial_success_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentelemetry::proto::collector::metrics::v1::ExportMetricsPartialSuccess&>(
      ::opentelemetry::proto::collector::metrics::v1::_ExportMetricsPartialSuccess_default_instance_);
}
inline const ::opentelemetry::proto::collector::metrics::v1::ExportMetricsPartialSuccess& ExportMetricsServiceResponse::partial_success() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse.partial_success)
  return _internal_partial_success();
}
inline void ExportMetricsServiceResponse::unsafe_arena_set_allocated_partial_success(
    ::opentelemetry::proto::collector::metrics::v1::ExportMetricsPartialSuccess* partial_success) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.partial_success_);
  }
  _impl_.partial_success_ = partial_success;
  if (partial_success) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse.partial_success)
}
inline ::opentelemetry::proto::collector::metrics::v1::ExportMetricsPartialSuccess* ExportMetricsServiceResponse::release_partial_success() {
  
  ::opentelemetry::proto::collector::metrics::v1::ExportMetricsPartialSuccess* temp = _impl_.partial_success_;
  _impl_.partial_success_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opentelemetry::proto::collector::metrics::v1::ExportMetricsPartialSuccess* ExportMetricsServiceResponse::unsafe_arena_release_partial_success() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse.partial_success)
  
  ::opentelemetry::proto::collector::metrics::v1::ExportMetricsPartialSuccess* temp = _impl_.partial_success_;
  _impl_.partial_success_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::collector::metrics::v1::ExportMetricsPartialSuccess* ExportMetricsServiceResponse::_internal_mutable_partial_success() {
  
  if (_impl_.partial_success_ == nullptr) {
    auto* p = CreateMaybeMessage<::opentelemetry::proto::collector::metrics::v1::ExportMetricsPartialSuccess>(GetArenaForAllocation());
    _impl_.partial_success_ = p;
  }
  return _impl_.partial_success_;
}
inline ::opentelemetry::proto::collector::metrics::v1::ExportMetricsPartialSuccess* ExportMetricsServiceResponse::mutable_partial_success() {
  ::opentelemetry::proto::collector::metrics::v1::ExportMetricsPartialSuccess* _msg = _internal_mutable_partial_success();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse.partial_success)
  return _msg;
}
inline void ExportMetricsServiceResponse::set_allocated_partial_success(::opentelemetry::proto::collector::metrics::v1::ExportMetricsPartialSuccess* partial_success) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.partial_success_;
  }
  if (partial_success) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(partial_success);
    if (message_arena != submessage_arena) {
      partial_success = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partial_success, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.partial_success_ = partial_success;
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse.partial_success)
}

// -------------------------------------------------------------------

// ExportMetricsPartialSuccess

// int64 rejected_data_points = 1;
inline void ExportMetricsPartialSuccess::clear_rejected_data_points() {
  _impl_.rejected_data_points_ = int64_t{0};
}
inline int64_t ExportMetricsPartialSuccess::_internal_rejected_data_points() const {
  return _impl_.rejected_data_points_;
}
inline int64_t ExportMetricsPartialSuccess::rejected_data_points() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.rejected_data_points)
  return _internal_rejected_data_points();
}
inline void ExportMetricsPartialSuccess::_internal_set_rejected_data_points(int64_t value) {
  
  _impl_.rejected_data_points_ = value;
}
inline void ExportMetricsPartialSuccess::set_rejected_data_points(int64_t value) {
  _internal_set_rejected_data_points(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.rejected_data_points)
}

// string error_message = 2;
inline void ExportMetricsPartialSuccess::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& ExportMetricsPartialSuccess::error_message() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExportMetricsPartialSuccess::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.error_message)
}
inline std::string* ExportMetricsPartialSuccess::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.error_message)
  return _s;
}
inline const std::string& ExportMetricsPartialSuccess::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void ExportMetricsPartialSuccess::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* ExportMetricsPartialSuccess::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* ExportMetricsPartialSuccess::release_error_message() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.error_message)
  return _impl_.error_message_.Release();
}
inline void ExportMetricsPartialSuccess::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.error_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace metrics
}  // namespace collector
}  // namespace proto
}  // namespace opentelemetry

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2fcollector_2fmetrics_2fv1_2fmetrics_5fservice_2eproto
